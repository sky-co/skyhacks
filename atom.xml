<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Practice Makes Perfect</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://skyhacks.org/"/>
  <updated>2018-08-29T16:20:45.070Z</updated>
  <id>http://skyhacks.org/</id>
  
  <author>
    <name>sky_co</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 867. Transpose Matrix</title>
    <link href="http://skyhacks.org/2018/08/30/LeetCode/LeetCode-TransposeMatrix/"/>
    <id>http://skyhacks.org/2018/08/30/LeetCode/LeetCode-TransposeMatrix/</id>
    <published>2018-08-30T01:40:59.000Z</published>
    <updated>2018-08-29T16:20:45.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a><a href="https://leetcode.com/problems/transpose-matrix" target="_blank" rel="external">题目描述</a>：</h2><p>Given a matrix A, return the transpose of A.<br>The transpose of a matrix is the matrix flipped over it’s main diagonal, switching the row and column indices of the matrix.</p>
<p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: [[1,2,3],[4,5,6],[7,8,9]]</div><div class="line">Output: [[1,4,7],[2,5,8],[3,6,9]]</div></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: [[1,2,3],[4,5,6]]</div><div class="line">Output: [[1,4],[2,5],[3,6]]</div></pre></td></tr></table></figure></p>
<p><strong>Note:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1 &lt;= A.length &lt;= 1000</div><div class="line">1 &lt;= A[0].length &lt;= 1000</div></pre></td></tr></table></figure></p>
<h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>把一个矩阵按照主对角线，翻转行列的数值。<br>测试样例见题目描述</p>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>其实就是讲远矩阵的行列颠倒过来，按主对角线翻转就是元素的行列索引值对调。</p>
<hr>
<p>参考LeetCode Discuss：<br><a href="https://leetcode.com/problems/transpose-matrix/discuss/146797/C++JavaPython-Easy-Understood" target="_blank" rel="external">https://leetcode.com/problems/transpose-matrix/discuss/146797/C++JavaPython-Easy-Understood</a></p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; transpose(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; A) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; vRes;</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> == A.size()) <span class="keyword">return</span> vRes;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> row = A.size();</div><div class="line">        <span class="keyword">int</span> col = A[<span class="number">0</span>].size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> colIdx = <span class="number">0</span>; colIdx &lt; col; colIdx++) &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> rowIdx = <span class="number">0</span>; rowIdx &lt; row; rowIdx++) &#123;</div><div class="line">                v.push_back(A[rowIdx][colIdx]);</div><div class="line">            &#125;</div><div class="line">            vRes.push_back(v);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> vRes;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/transpose-matrix&quot; target=&quot;_blank
    
    </summary>
    
      <category term="LeetCode" scheme="http://skyhacks.org/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://skyhacks.org/tags/LeetCode/"/>
    
      <category term="Algorithms" scheme="http://skyhacks.org/tags/Algorithms/"/>
    
      <category term="Data Structure" scheme="http://skyhacks.org/tags/Data-Structure/"/>
    
      <category term="Array" scheme="http://skyhacks.org/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Share_Week2-如何正确高效地问对问题</title>
    <link href="http://skyhacks.org/2018/08/30/Arts/Week2/Arts-Share-Week2-HowToAskQuestions/"/>
    <id>http://skyhacks.org/2018/08/30/Arts/Week2/Arts-Share-Week2-HowToAskQuestions/</id>
    <published>2018-08-29T16:22:02.000Z</published>
    <updated>2018-09-02T16:24:09.162Z</updated>
    
    <content type="html"><![CDATA[<p>“Judge a man by his questions rather than by his answers.” ― Voltaire</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>可能大家看到这个标题觉得很不以为然，不就是问问题么？谁不会啊！可你有想过高效正确的问对问题么？耗叔曾经写过一篇文章<a href="https://coolshell.cn/articles/10804.html" target="_blank" rel="external">&lt;<x-y problem="">&gt;</x-y></a>。今天选择聊这个话题也是因为最近接手的项目周期比较赶，文档缺失，但是又需要你能快速把握整个系统，所以就需要跟很多与这个项目有关联的人打交道，这个就挺考验提问的技巧。<br>言归正传，下面就开始谈谈怎么高效地问对问题。</p>
<h2 id="为什么要问问题"><a href="#为什么要问问题" class="headerlink" title="为什么要问问题"></a>为什么要问问题</h2><p>这个好像是废话，因为不懂，因为想知道为什么，好了下一个…</p>
<h2 id="你想要的是什么"><a href="#你想要的是什么" class="headerlink" title="你想要的是什么"></a>你想要的是什么</h2><p>当你在想要问问题前，你必须先要知道你到底想要问的是什么，并且把一个问题放到一个合适的上下文环境中，这样才有助于回答者可以快速理解你的问题点并给出回答。</p>
<h2 id="如何才能正确高效地问对问题"><a href="#如何才能正确高效地问对问题" class="headerlink" title="如何才能正确高效地问对问题"></a>如何才能正确高效地问对问题</h2><p>让我们先从一个例子开始：</p>
<blockquote>
<p>你: “老板，我需要怎样做才能得到提升啊?”<br>老板:“你必须按期完成我们需要的目标！”<br>呵呵，这不是开玩笑。老板的回答的确回答了你的问题, 但是可能并不是你所期望的回答。你只能疑惑地离开，想着老板是不是对你的工作和进步不太在意?</p>
</blockquote>
<p>让我们换另一种方法:</p>
<blockquote>
<p>你: “老板, 假设我按期完成了目标，如果我想要得到提升，那么在其他方面我还需要做什么？”<br>老板: “呃，你也确实应该涉及决策部门了，而不仅仅是完成任务。”</p>
</blockquote>
<p>正如你看到的，你的措辞对你得到的答复影响很大。所以，聪明的问问题方法是：把对方会显而易见的回答变成自己的陈述包含在你问的问题中。让别人顺着你“设计好的圈套”回答你想知道的答案。这就是问问题的技巧。</p>
<p><strong>问问题的场合</strong><br>不同的场合和形势下，你问问题所用的方法也会不同。不同场合需要换位思考，别人是否方便回答你的问题，比如以下几个场合就不是很方便：</p>
<ol>
<li>在别人打电话的时候；</li>
<li>—非常忙碌的时候；</li>
<li>正在休息的时候；</li>
<li>开会的时候；</li>
<li>会见客人的时候；</li>
<li>处理私人问题的时候；</li>
</ol>
<p>当然首先语言上一定要注意礼貌问题，打招呼时先说你好。这样不会引起别人的反感。<br>其次，且不说别人给出的答案是否100%正确，当别人花时间给你解释和回答了问题，结束时候记得要感谢别人，礼尚往来。</p>
<p><strong>问可供选择的问题</strong><br>这个技巧其实是很多做销售的人惯用的技巧。不要问只有“是”与“否”两个答案的问题，除非你十分肯定答案是“是”。<br>例如：不要问：“你想买双门轿车吗?”；要问：“你想要双门还是四门轿车?”<br>如果你用后面这种二选一的问题，回答问题的人就无法拒绝你。</p>
<p><strong>要问具体的内容</strong><br>不要问太泛的问题，因为这些问题的回答往往也是可有可无，你得不到有价值的答案。所以，尽量问你所关心的具体内容，有针对性的去问问题，每个问题最好都集中针对某个具体的点。<br>同时，对于问题的描述一定要言简意赅，最简单概括的语言把你的问题说出来，让人家听懂，这样也给对方一个思考的时间。</p>
<p><strong>学会聆听</strong></p>
<blockquote>
<p>Silence is golden.<br>问问题是一个相互沟通的过程，成为一个好的听众也很重要。尤其是别人正在说话或者回答问题时候，贸然的打断显得很不礼貌，同时也可能打乱别人的逻辑。</p>
</blockquote>
<p><strong>换位思考问自己</strong><br>花一秒钟的时间思考一下你将如何回答你将要问的问题，换位思考，假如你是对方，你会怎么回答这个问题？ 这个问题的描述是否准备，措辞是否得当？ 如果不合适，请考虑换个措辞或者修改问题的描述。<br>国外有个很著名的<a href="http://www.ituring.com.cn/article/195788" target="_blank" rel="external">橡皮鸭子解决问题法</a>, 大意就是提交问题的人应该在提问前多花点时间研究一下他们的问题，整理思路，对着一只橡皮鸭提出的问题。在提问的过程中思考，自己的问题是否是自己想要的问的东西？在这个过程中，说不定不用找别人提问，自己就有了答案。</p>
<p><strong>确认是否听懂了回答</strong><br>如果问题很重要，你必须反复确认你是否听明白了回答，你可以用下面的办法确认你听到的回答：</p>
<ol>
<li><p>重复<br>“哦，你的意思是说如果X和Y发生的话，Z就会发生。对吗？”</p>
</li>
<li><p>装不懂：<br>“好的，你可以稍微再解释一下吗（我只想确定我是否听明白了）？”</p>
</li>
<li><p>换做自己的话说：<br>“嗯，不错。如果X和Y发生的话，我应该期望Z会发生，因为…”<br>使用和回答者不同的措辞，并把你认为的话添加在后面。即使你所认为的事情可能并没有在会话中出现，但是，加上你说的话会使这场谈话更有价值。</p>
</li>
</ol>
<p><strong>训练</strong><br>在问别人前，先按照以下方法向自己发问，通过平时稍加训练，有助于你成为更好的思考者。</p>
<blockquote>
<ol>
<li>Focus: What specifically do I want to know? What information am I missing? Is this more than a simple YES or NO question? Am I going for deeper knowledge?</li>
<li>Purpose: Why am I asking this? Do I want to gather facts or opinions? Do I need simple clarification? Do I want to offer a different perspective?</li>
<li>Intent: How do I want people to respond? Do I want the answer to be of help to others? Am I asking to start an argument or open a discussion? Is the question superficial and not really useful or important? Am I asking out of frustration or curiosity? Do I really care about the answer? Am I willing to show respect/deference to the person I’m asking?</li>
<li>Framing: Am I using easily understandable terms and wording? Is my question neutral or does it contain bias or opinion? Is it too long or too short? Does it contain the focus of what I want to know? Does the question focus on only one thing? Is it muddled with other inquiries that don’t belong?</li>
<li>Follow-up: Do I have any more specific questions to add? Will the person I’m asking be available for other questions if need be? If I still don’t have the answer I need, what’s my plan? What can I do if I still don’t understand?</li>
</ol>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>问问题也是一门艺术，其中有很多技巧，上面只是几个关键的点。在你下次问问题的时候，不妨换一个问法，相信你会有新的体验和收获。</p>
<p>以下是文章相关链接：</p>
<ol>
<li><a href="https://www.douban.com/group/topic/8100581/" target="_blank" rel="external">https://www.douban.com/group/topic/8100581/</a></li>
<li><a href="https://jingyan.baidu.com/article/fdbd4277a5d7e8b89f3f485a.html" target="_blank" rel="external">https://jingyan.baidu.com/article/fdbd4277a5d7e8b89f3f485a.html</a></li>
<li><a href="https://www.entrepreneur.com/article/254264" target="_blank" rel="external">https://www.entrepreneur.com/article/254264</a></li>
<li><a href="https://hbr.org/2009/05/real-leaders-ask.html" target="_blank" rel="external">https://hbr.org/2009/05/real-leaders-ask.html</a></li>
<li><a href="https://www.lifehack.org/articles/communication/how-amazingly-good-asking-questions.html" target="_blank" rel="external">https://www.lifehack.org/articles/communication/how-amazingly-good-asking-questions.html</a></li>
<li><a href="https://www.inc.com/rhett-power/great-leaders-ask-the-right-questions.html" target="_blank" rel="external">https://www.inc.com/rhett-power/great-leaders-ask-the-right-questions.html</a></li>
<li><a href="https://www.coachingforchange.com/pub10.html" target="_blank" rel="external">https://www.coachingforchange.com/pub10.html</a></li>
<li><a href="https://medium.com/personal-growth/are-you-asking-the-right-questions-48c7de027de" target="_blank" rel="external">https://medium.com/personal-growth/are-you-asking-the-right-questions-48c7de027de</a></li>
<li><a href="https://globaldigitalcitizen.org/ask-good-questions-infographic" target="_blank" rel="external">https://globaldigitalcitizen.org/ask-good-questions-infographic</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“Judge a man by his questions rather than by his answers.” ― Voltaire&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;
    
    </summary>
    
      <category term="Arts" scheme="http://skyhacks.org/categories/Arts/"/>
    
    
      <category term="Arts" scheme="http://skyhacks.org/tags/Arts/"/>
    
      <category term="Share" scheme="http://skyhacks.org/tags/Share/"/>
    
      <category term="Week2" scheme="http://skyhacks.org/tags/Week2/"/>
    
  </entry>
  
  <entry>
    <title>Arts-Tip_Week2 - 使用Hexo和GitHub搭建博客，出现hexo -d报错解决方案</title>
    <link href="http://skyhacks.org/2018/08/29/Arts/Week2/Arts-Tip-Week2-HexoDeployGithub/"/>
    <id>http://skyhacks.org/2018/08/29/Arts/Week2/Arts-Tip-Week2-HexoDeployGithub/</id>
    <published>2018-08-29T15:48:27.000Z</published>
    <updated>2018-08-29T16:03:26.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><hr>
<p>之前按照网上的教程，自己用Hexo搭建了一个博客。为了偷懒，写了一个hook的脚本，实现一行命令提交并且更新博客内容，见文稿:<a href="http://skyhacks.org/2017/07/21/Others/UseHexoToBuildBlog/">Hexo环境搭建个人博客</a>。<br>但是之前Hexo的部署方案有问题，隔了一段时间以后发现没办法提交Github和部署到自己的博客网站了。</p>
<h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><hr>
<p>解决方法是修改根目录下的_config.yml配置<br>下面是<a href="https://hexo.io/zh-cn/docs/deployment.html#Git" target="_blank" rel="external">文档</a> 中的写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">type: git</div><div class="line">repo: &lt;repository url&gt;</div><div class="line">branch: [branch]</div><div class="line">message: [message]</div></pre></td></tr></table></figure></p>
<p>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">- type: git</div><div class="line">  repo: git@VPS的IP地址:/home/git/hexo.git#VPS上对应的git仓库(包含git hooks的地址)</div><div class="line">  branch: master</div><div class="line">- type: git</div><div class="line">  repo: git@github.com:&#123;yourname&#125;/hexo.git#github上对应的保存静态文件的仓库</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<h2 id="三、后记"><a href="#三、后记" class="headerlink" title="三、后记"></a>三、后记</h2><hr>
<p>以下是自己搭建过程中查找的相关链接和信息，希望对大家有帮助。</p>
<ol>
<li><a href="https://www.zhihu.com/question/38219432" target="_blank" rel="external">https://www.zhihu.com/question/38219432</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;之前按照网上的教程，自己用Hexo搭建了一个博客。为了偷懒，写了一个hook的脚本，实现一行命令提交并且更新博客内
    
    </summary>
    
      <category term="Arts" scheme="http://skyhacks.org/categories/Arts/"/>
    
    
      <category term="Hexo" scheme="http://skyhacks.org/tags/Hexo/"/>
    
      <category term="Arts" scheme="http://skyhacks.org/tags/Arts/"/>
    
      <category term="Week2" scheme="http://skyhacks.org/tags/Week2/"/>
    
      <category term="Tip" scheme="http://skyhacks.org/tags/Tip/"/>
    
      <category term="Git" scheme="http://skyhacks.org/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Review_Week2 - Remote Code Execution on a Facebook server</title>
    <link href="http://skyhacks.org/2018/08/25/Arts/Week2/Arts-Review_Week2-MyArtsPlan/"/>
    <id>http://skyhacks.org/2018/08/25/Arts/Week2/Arts-Review_Week2-MyArtsPlan/</id>
    <published>2018-08-24T16:07:10.000Z</published>
    <updated>2018-08-28T15:51:45.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Remote-Code-Execution-on-a-Facebook-server"><a href="#Remote-Code-Execution-on-a-Facebook-server" class="headerlink" title="Remote Code Execution on a Facebook server"></a><a href="https://blog.scrt.ch/2018/08/24/remote-code-execution-on-a-facebook-server/" target="_blank" rel="external">Remote Code Execution on a Facebook server</a></h2><p>By Blaklis</p>
<p>I regularly search for vulnerabilities on big services that allow it and have a Bug Bounty program. Here is my first paper which covers a vulnerability I discovered on one of Facebook’s servers.<br>我经常在大型服务器中需找漏洞，并且有个bug赏金计划。这个是我的第一篇文章，其中介绍了一个我在一台Facebook的服务器上发现的漏洞。</p>
<p>While scanning an IP range that belongs to Facebook (199.201.65.0/24), I found a Sentry service hosted on 199.201.65.36, with the hostname sentryagreements.thefacebook.com. Sentry is a log collection web application, written in Python with the Django framework.<br>当我在扫描属于Facebook（199.201.65.0/24）的IP范围时，我在199.201.65.36中找到了一个岗哨服务，主机名叫sentryagreements.thefacebook.com。岗哨是一个日子收集的网络程序，基于Django framework使用python开发的。</p>
<p>While I was looking at the application, some stacktraces regularly popped on the page, for an unknown reason. The application seemed to be unstable regarding the user password reset feature, which occasionally crashed. Django debug mode was not turned off, which consequently prints the whole environment when a stacktrace occurs. However, Django snips critical information (passwords, secrets, key…) in those stacktraces, therefore avoiding a massive information leakage.<br>正当我在看这个应用的时候，不知道什么原因，一些stacktraces不时的在页面上弹出。关于用户密码重置这个特性来看，这个应用看起来很不稳定，不时的崩溃。Django debug mode并没有关闭， 结果是当stacktrace发生时，日志打印出整个环境信息。无论如何，Django抓取了一些诸如密码和秘密，还有密钥等的关键的信息</p>
<p>However, by looking at the stacktrace a little more closely, some env keys were interesting :<br>无论如何，稍微仔细看了下stacktrace，一些环境的key值非常有意思：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">The SESSION_COOKIE_NAME is sentrysid</div><div class="line">SESSION_COOKIE_NAME是岗哨服务</div><div class="line">The SESSION_SERIALIZER is django.contrib.sessions.serializers.PickleSerializer</div><div class="line">SESSION_SERIALIZER是django.contrib.sessions.serializers.PickleSerializer</div><div class="line">The SESSION_ENGINE is django.contrib.sessions.backends.signed_cookies</div><div class="line">SESSION_ENGINE是django.contrib.sessions.backends.signed_cookies</div><div class="line">The SENTRY_OPTIONS key that contains some Sentry configuration in a list.</div><div class="line">SENTRY_OPTIONS键值包含了一些岗哨的在一个列表中的配置信息。</div></pre></td></tr></table></figure></p>
<p>Pickle is a binary protocol for (un)serializing Python object structures, such as classes and methods in them. A comprehensive article that explains what Pickle is and its security implications is available here :<br><a href="https://www.balda.ch/posts/2013/Jun/23/python-web-frameworks-pickle/" target="_blank" rel="external">https://www.balda.ch/posts/2013/Jun/23/python-web-frameworks-pickle/</a><br>Pickle是一个用于python对象数据结构序列化和反序列化的协议，比如其中的类和方法。一篇关于Pickle和它的安全实现的文章地址如下：<br><a href="https://www.balda.ch/posts/2013/Jun/23/python-web-frameworks-pickle/" target="_blank" rel="external">https://www.balda.ch/posts/2013/Jun/23/python-web-frameworks-pickle/</a></p>
<p>If we were able to forge our own session that contains arbitrary pickle content, we could execute commands on the system. However, the SECRET_KEY that is used by Django for signing session cookies is not available in the stacktrace. However, the SENTRY_OPTIONS list contains a key named system.secret-key, that is not snipped. Quoting the Sentry documentation, system.secret-key is “a secret key used for session signing. If this becomes compromised it’s important to regenerate it as otherwise its much easier to hijack user sessions.“; wow, it looks like it’s a sort of Django SECRET-KEY override!<br>如果我们可以在我们的session里包含一些任意的pickle的内容，我们就可以执行系统的命令。无论如何，stacktrace里的被Django用于单独签名的session cookiesSECRET_KEY是无效的的。无论如何，SENTRY_OPTIONS的键值里包含system.secret-key，这是逃不掉的。引用Sentry的文档，system.secret-key是用于session 签名的一个的密钥。如果这一问题被破坏，那么重新生成它是很重要的，否则就更容易劫持用户会话。wow, 这看起来就像 Django 的某个SECRET-KEY被覆写了。</p>
<p>As we have everything to forge our own cookies with arbitrary pickle content, I wrote a little script that adds a payload into my own sentrysid cookie. Here it is :<br>我们想把一切东西都融合到我们包含arbitrary pickle的cookies里，我写了一个小脚本用于添加负载到我的sentrysid cookie里。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">import django.core.signing, django.contrib.sessions.serializers</div><div class="line">from django.http import HttpResponse</div><div class="line">import cPickle</div><div class="line">import os</div><div class="line"></div><div class="line">SECRET_KEY=&apos;[RETRIEVEDKEY]&apos;</div><div class="line">#Initial cookie I had on sentry when trying to reset a password</div><div class="line">cookie=&apos;gAJ9cQFYCgAAAHRlc3Rjb29raWVxAlgGAAAAd29ya2VkcQNzLg:1fjsBy:FdZ8oz3sQBnx2TPyncNt0LoyiAw&apos;</div><div class="line">newContent =  django.core.signing.loads(cookie,key=SECRET_KEY,serializer=django.contrib.sessions.serializers.PickleSerializer,salt=&apos;django.contrib.sessions.backends.signed_cookies&apos;)</div><div class="line">class PickleRce(object):</div><div class="line">    def __reduce__(self):</div><div class="line">        return (os.system,(&quot;sleep 30&quot;,))</div><div class="line">newContent[&apos;testcookie&apos;] = PickleRce()</div><div class="line"></div><div class="line">print django.core.signing.dumps(newContent,key=SECRET_KEY,serializer=django.contrib.sessions.serializers.PickleSerializer,salt=&apos;django.contrib.sessions.backends.signed_cookies&apos;,compress=True)</div></pre></td></tr></table></figure></p>
<p>This code is a simple proof of concept; it takes the content of an existing sentrysid cookie, and replaces its content with an arbitrary object that will run a os.system(“sleep 30”) when unserialized.<br>这个代码是对概念的简单的证实。它获取了现存的sentrysid的cookie的内容，然后一个任意的对象替换了其中的内容，当反序列化的时候就会执行os.system(“sleep 30”)。</p>
<p>When using this cookie, the page actually takes an additional 30 seconds to load, which confirms the presence of the flaw.<br>当使用这个cookie的时候，页面就会自然等待30秒的去加载，以上证实了缺陷的存在。</p>
<p>Facebook acknowledged the vulnerability, took down the system until the flaw was patched, and then notified me about the patch being in place.<br>Facebook知道了这个漏洞，关闭了系统直到缺陷被打上补丁。然后通知我补丁已经就位。</p>
<p>Here is the disclosure timeline, which also demonstrates that Facebook security staff is reactive:<br>下面是批露的一些时间线，更证实了Facebook安全人员是被动的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">30.07.2018 00:00 CEST : initial disclosure with every details.</div><div class="line">30.07.2018 00:00 CEST : 初始化泄漏所有的细节.</div><div class="line">30.07.2018 15:25 CEST : triaged and system takedown.</div><div class="line">30.07.2018 15:25 CEST : 系统修复和可拆卸.</div><div class="line">09.08.2018 18:10 CEST : patch in place.</div><div class="line">09.08.2018 18:10 CEST : 补丁就位.</div><div class="line">09.08.2018 20:10 CEST : a 5000$ bounty is awarded – the server was in a separate VLAN with no users’ specific data.</div><div class="line">09.08.2018 20:10 CEST : 一个5000美元的赏金被授予——服务器位于一个单独的VLAN中，没有用户的特定数据.</div></pre></td></tr></table></figure></p>
<p>Thanks for reading!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Remote-Code-Execution-on-a-Facebook-server&quot;&gt;&lt;a href=&quot;#Remote-Code-Execution-on-a-Facebook-server&quot; class=&quot;headerlink&quot; title=&quot;Remote C
    
    </summary>
    
      <category term="Arts" scheme="http://skyhacks.org/categories/Arts/"/>
    
    
      <category term="Arts" scheme="http://skyhacks.org/tags/Arts/"/>
    
      <category term="Week2" scheme="http://skyhacks.org/tags/Week2/"/>
    
      <category term="Review" scheme="http://skyhacks.org/tags/Review/"/>
    
  </entry>
  
  <entry>
    <title>Share_Week1-不做伪工作者</title>
    <link href="http://skyhacks.org/2018/08/21/Arts/Week1/Arts-Share-Week1-HowToWork/"/>
    <id>http://skyhacks.org/2018/08/21/Arts/Week1/Arts-Share-Week1-HowToWork/</id>
    <published>2018-08-20T16:22:02.000Z</published>
    <updated>2018-08-24T15:34:47.802Z</updated>
    
    <content type="html"><![CDATA[<p>今天听了《吴军硅谷来信-001封信|不做伪工作者》，感触颇多，稍微整理记录一下，分享出来。</p>
<h2 id="伪工作者的定义"><a href="#伪工作者的定义" class="headerlink" title="伪工作者的定义"></a>伪工作者的定义</h2><p>伪工作者（Pseudo Worker），来源于Google。指代一些每天应付事务性的工作的人。这些人虽然每天把自己搞得很忙，但是他们所作的工作（也被称为伪工作）并不会对公司的发展产生什么重大效果，俗称碌碌无为。</p>
<h2 id="产生条件"><a href="#产生条件" class="headerlink" title="产生条件"></a>产生条件</h2><ol>
<li>当员工对自己在公司的境遇不满，他们会消极对待工作，不自觉成为一个伪工作者。</li>
<li>一些员工总是挑些简单的事情而不是有挑战的工作去做，工作状态看上去饱和，但是实际上是在坑自己，伪工作做的越多，个人进步就越慢，甚至倒退。</li>
</ol>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>对于管理者</strong></p>
<ol>
<li>管理者要让员工站在“做什么事情能让公司最大收益”的基础上去工作。<br>只有这样才能让员工开始动脑筋在做不完的工作中找到那些对公司最有帮助的时期去做，而不是就简单应付老板安排的工作并交差。</li>
<li>管理者要让员工明白，他们积极工作（而不是消极完成任务），最大的受益方是他们自己。</li>
</ol>
<p><strong>对于员工自身</strong><br>一个人追求的不是完成了百分之几，或者百分之几十的工作，而是做完了那几件重要的事情。一个聪明的员工，应该善于找到最重要的工作，并且优先完成它们，产生最大化收益。而这个，恰恰是每一个新员工说欠缺的。</p>
<p>宽泛的讲，其实很多人在生活中，也是不断把时间浪费在那些可做可不做的事情上，然后收效甚微。</p>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>工作很多，永远也不可能做不完。这叫要求我们要会甄别什么才是最重要的工作，可以借鉴80-20法则，往往20%的工作才是最有产出的工作，也最应该我们花时间花精力把它做好，只有这样才能称得上Smart Work。当然，找对做事情的方法后，还要做好对时间的把控。不然只是在做重复性的劳动，这样的情况，在优胜劣汰的自然界，是迟早要被淘汰的。</p>
<blockquote>
<p><strong>吴军的观点：</strong>在面对总也做不完的工作，主动的站在对公司业务帮助最大的角度，站在提升自己能力的角度，把那些最重要的完成了。</p>
<p><strong>罗胖的观点：</strong>面对那些可做可不做的事情，只要有时间就去做。</p>
</blockquote>
<p>愿你在工作之余还能有时间欣赏身边的风景。</p>
<p>以下是文章相关链接：</p>
<ol>
<li><a href="https://www.jianshu.com/p/ba5371bc53b7" target="_blank" rel="external">https://www.jianshu.com/p/ba5371bc53b7</a></li>
<li><a href="https://www.jianshu.com/p/3a33de2675f9" target="_blank" rel="external">https://www.jianshu.com/p/3a33de2675f9</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天听了《吴军硅谷来信-001封信|不做伪工作者》，感触颇多，稍微整理记录一下，分享出来。&lt;/p&gt;
&lt;h2 id=&quot;伪工作者的定义&quot;&gt;&lt;a href=&quot;#伪工作者的定义&quot; class=&quot;headerlink&quot; title=&quot;伪工作者的定义&quot;&gt;&lt;/a&gt;伪工作者的定义&lt;/h2&gt;
    
    </summary>
    
      <category term="Arts" scheme="http://skyhacks.org/categories/Arts/"/>
    
    
      <category term="Arts" scheme="http://skyhacks.org/tags/Arts/"/>
    
      <category term="Share" scheme="http://skyhacks.org/tags/Share/"/>
    
      <category term="Week1" scheme="http://skyhacks.org/tags/Week1/"/>
    
  </entry>
  
  <entry>
    <title>Tip_Week1 - Git 换行符（LF和CRLF）问题解决</title>
    <link href="http://skyhacks.org/2018/08/20/Arts/Week1/Arts-Tip_Week1-GitLineEndingCharacter/"/>
    <id>http://skyhacks.org/2018/08/20/Arts/Week1/Arts-Tip_Week1-GitLineEndingCharacter/</id>
    <published>2018-08-19T16:26:35.000Z</published>
    <updated>2018-08-20T15:21:07.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><hr>
<p>在各操作系统下，文本文件所使用的换行符是不一样的。UNIX/Linux 使用的是 0x0A（LF），早期的 Mac OS 使用的是0x0D（CR），后来的 OS X 在更换内核后与 UNIX 保持一致了。但 DOS/Windows 一直使用 0x0D0A（CRLF）作为换行符。Git提供了一个“换行符自动转换”功能。这个功能默认处于“自动模式”，当你在签出文件时，它试图将 UNIX 换行符（LF）替换为 Windows 的换行符（CRLF）；当你在提交文件时，它又试图将 CRLF 替换为 LF。Git 的“换行符自动转换”功能听起来似乎很智能、很贴心，因为它试图一方面保持仓库内文件的一致性（UNIX 风格），一方面又保证本地文件的兼容性（Windows 风格）。但遗憾的是，这个功能是有 bug 的，而且在短期内都不太可能会修正。</p>
<h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><hr>
<h3 id="Git设置"><a href="#Git设置" class="headerlink" title="Git设置"></a>Git设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global core.autocrlf false</div><div class="line">git config --global core.safecrlf true</div></pre></td></tr></table></figure>
<h3 id="AutoCRLF"><a href="#AutoCRLF" class="headerlink" title="AutoCRLF"></a>AutoCRLF</h3><p><strong>提交时转换为LF，检出时转换为CRLF</strong><br><code>git config --global core.autocrlf true</code></p>
<p><strong>提交时转换为LF，检出时不转换</strong><br><code>git config --global core.autocrlf input</code></p>
<p><strong>提交检出均不转换</strong><br><code>git config --global core.autocrlf false</code></p>
<h3 id="SafeCRLF"><a href="#SafeCRLF" class="headerlink" title="SafeCRLF"></a>SafeCRLF</h3><p><strong>拒绝提交包含混合换行符的文件</strong><br><code>git config --global core.safecrlf true</code></p>
<p><strong>允许提交包含混合换行符的文件</strong><br><code>git config --global core.safecrlf false</code></p>
<p><strong>提交包含混合换行符的文件时给出警告</strong><br><code>git config --global core.safecrlf warn</code></p>
<h3 id="IDE设置使用UNIX换行符"><a href="#IDE设置使用UNIX换行符" class="headerlink" title="IDE设置使用UNIX换行符"></a>IDE设置使用UNIX换行符</h3><p>IDEA的设置File -&gt; Settings<br>Editor -&gt; Code Style<br>Line separator (for new lines) ，选择：Unix and OS X (\n)</p>
<p>对已使用Windows换行符的文件，可以使用Sublime Text打开，<br>View-&gt;Line Endings，选Unix，保存；</p>
<h2 id="三、后记"><a href="#三、后记" class="headerlink" title="三、后记"></a>三、后记</h2><hr>
<p>以下是自己搭建过程中查找的相关链接和信息，希望对大家有帮助。</p>
<ol>
<li><a href="https://www.cnblogs.com/zjoch/p/5400251.html" target="_blank" rel="external">https://www.cnblogs.com/zjoch/p/5400251.html</a></li>
<li><a href="https://blog.csdn.net/w6248117/article/details/76177103" target="_blank" rel="external">https://blog.csdn.net/w6248117/article/details/76177103</a></li>
<li><a href="https://blog.csdn.net/guodengh/article/details/8630888" target="_blank" rel="external">https://blog.csdn.net/guodengh/article/details/8630888</a></li>
<li><a href="http://kuanghy.github.io/2017/03/19/git-lf-or-crlf" target="_blank" rel="external">http://kuanghy.github.io/2017/03/19/git-lf-or-crlf</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在各操作系统下，文本文件所使用的换行符是不一样的。UNIX/Linux 使用的是 0x0A（LF），早期的 Mac
    
    </summary>
    
      <category term="Arts" scheme="http://skyhacks.org/categories/Arts/"/>
    
    
      <category term="Arts" scheme="http://skyhacks.org/tags/Arts/"/>
    
      <category term="Tip" scheme="http://skyhacks.org/tags/Tip/"/>
    
      <category term="Git" scheme="http://skyhacks.org/tags/Git/"/>
    
      <category term="Week1" scheme="http://skyhacks.org/tags/Week1/"/>
    
  </entry>
  
  <entry>
    <title>Review_Week1 - What Was Elon Musk Thinking?</title>
    <link href="http://skyhacks.org/2018/08/20/Arts/Week1/Arts-Review_Week1-ElonMuskThinking/"/>
    <id>http://skyhacks.org/2018/08/20/Arts/Week1/Arts-Review_Week1-ElonMuskThinking/</id>
    <published>2018-08-19T16:00:17.000Z</published>
    <updated>2018-08-22T15:44:42.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-Was-Elon-Musk-Thinking"><a href="#What-Was-Elon-Musk-Thinking" class="headerlink" title="What Was Elon Musk Thinking?"></a><a href="https://medium.com/the-new-york-times/what-was-elon-musk-thinking-8166da03f1cc" target="_blank" rel="external">What Was Elon Musk Thinking?</a></h2><p>By James B. Stewart</p>
<p>There’s no question that Elon Musk is one of the great entrepreneurs of this era. He may even be in “a class of one,” as he recently described Tesla, the revolutionary electric car company he founded.<br>毫无疑问，埃隆·马斯克是这个时代最伟大的企业家之一。他甚至也可能是那一类人，他最近提及他创立的革命性的电动汽车公司特斯拉。</p>
<p>But Musk’s tweet last week — expressing his intent to take Tesla private and declaring that he had “funding secured” for the multibillion-dollar transaction — was so impulsive, potentially inaccurate, poorly worded and thought out, and with such potentially dire consequences for himself, Tesla and its shareholders, that the board now must ask a sensitive but vital question: What was Musk’s state of mind when he wrote it?<br>但就在马斯克上周在推特上发文透露他有意将特斯拉私有化，并且声称他有足够的资金担保。推文如此冲动、可能并不准确，措辞不当并且欠缺考虑，对他自己造成了潜在的可怕的后果。特斯拉的股东还有董事此刻一定想问一个敏感但是至关重要的问题：“马斯克在写这些话的时候脑子里到底在想啥？”</p>
<p>“What does this say about the judgment of the person who set all this in motion?” said Charles M. Elson, director of the Weinberg Center for Corporate Governance at the University of Delaware. “That’s what the board has to find out.”<br>“这些所作所为到底说明了什么？”， 特拉华州大学的温伯格公司管理中心的主管Charles M. Elson这么说道，“这也正是董事会想要知道的。”</p>
<p>Musk, in subsequent blog posts, has stressed that he was only trying to be as transparent with the public as he was about to be with a few major investors.<br>马斯克在后续的博客推文中强调他只是想要在和几个主要投资人在一起的时候在公众前变得透明。</p>
<p>That is a laudable goal. But there are plenty of effective, conventional methods for achieving them, which include keeping his board fully informed, consulting lawyers, and following Securities and Exchange Commission procedures before tweeting about what could be a transformative, hugely expensive corporate buyout.<br>这是一个值得赞赏的目标。但在推特上发文要做出一个颠覆性、非常昂贵的公司收购意向前，依然有很多有效并且传统的途径可以达到这些目的，比如在与董事会充分沟通、咨询律师，并且遵循证券交易委员会的程序。</p>
<p>Little if any of this appears to have happened. While Tesla directors have said they discussed with Musk the possibility of taking Tesla private in general terms, they were blindsided by the tweet and have been scrambling ever since to get the situation under control.<br>假如这一切都发生了。特斯拉的主管声称他们已经和马斯克关于将特斯拉私有化的一般条款进行过磋商，他们还是被这条推文弄得措手不及，从那以后就一直在手忙脚乱地控制局面。</p>
<p>The explanation for the tweet may be more psychological than strategic. In a Twitter exchange from last summer, Musk said he experienced “great highs, terrible lows and unrelenting stress.”<br>推特的文字的意义可能心理作用大于战略作用。在去年夏天一次交流中，马斯克曾经表示他体会过巨大的高潮，可怕的低谷和无情的压力。</p>
<p>Asked if he might be bipolar, he replied, “Yeah.” Then he added, “Maybe not medically tho. Dunno. Bad feelings correlate to bad events, so maybe real problem is getting carried away in what I sign up for,” which he later described as a “ticket to hell.”<br>当被问及他是否患有躁郁症时候，马斯克回应，“是的”。然后他补充道：“也许不是医学上认定的那样。坏的情绪总是和坏的事情有关联，所以也许真正的问题是被我所签的东西冲昏了头脑”。他后来描述为“一张通往地狱的车票”。</p>
<p>“Entrepreneurs often have a temperament and a constellation of traits that can create enormous value but are also associated with significant risks,” said Michael A. Freeman, a clinical professor of psychiatry at the University of California, San Francisco, whose research and practice focuses on entrepreneurs.<br>“企业家总是有一些喜怒无常和一个星座的特质，这些东西可以创造巨大的价值，但是也伴随着巨大的危险”。旧金山加州大学的精神病学临床教授Michael A. Freeman如此说道。他的研究的对象是一些企业家。</p>
<p>While Freeman said he couldn’t comment on Musk, whom he’s never treated, he said that his research and experience with clients show that entrepreneurs generally “have mental health profiles that are associated with higher levels of creativity, higher levels of energy, higher levels of risk tolerance and higher levels of impulsivity. Another way to look at impulsivity is a need for speed, a sense of urgency, higher motivation, and greater restlessness.”<br>但是Freeman说他不能对马斯克做出任何评价，因为他从未诊治过他。他研究经历显示通常患有精神病症的企业家都拥有更高水平的创造力、精力、风险承受能力和、冲动。另一种看待冲动的方式是对速度的需要，一种紧迫感，更高的动力，和更大的不安。</p>
<p>All of that would seem consistent with Musk’s Twitter habits.<br>所有这些似乎都与马斯克的Twitter习惯相一致。</p>
<p>Scott Shane, a professor of entrepreneurial studies at Case Western Reserve University, put it more simply: “These people are just wired differently,” he said. “They’re quicker to spot and act on opportunities, but that same tendency can get them into trouble in other situations.”<br>凯斯西储大学的创业研究教授Scott Shane说的更简单：“这些人只是精力不一样，他们会更快地发现并采取行动，但同样的趋势会让他们在其他情况下陷入麻烦。”</p>
<p>These qualities may also be exacerbated by lack of sleep. Musk has said he’s been sleeping on the factory floor, skipping showers, and working extremely long hours while Tesla ramps up production of its Model 3.<br>这些品质可能因为缺乏睡眠而加重。马斯卡曾提及在特斯拉增加Model 3的产量期间，他睡在工厂的地板上，没时间洗澡，长时间的工作。</p>
<p>“There are a number of behavioral destabilizers in the world of entrepreneurship,” Freeman said, “and sleep deficiency is high on the list. The consequences can be impaired functioning, higher irritability, and judgment can be adversely affected.”<br>“在创业的世界里有很多行为不稳定的人”, Freeman 说道，“睡眠不足很常见。直接导致的后果是身体功能受损、易怒、判断可能受到不利影响。”</p>
<p>During Tesla’s most recent earnings conference call, Musk apologized to Wall Street analysts he had insulted during a previous call for asking “boring, bonehead questions.”<br>在特斯拉最近的财报会议上，马斯克为自己在上一次财报会上的无礼向华尔街分析家道歉，他当时侮辱了“无聊的、愚蠢的问题”。</p>
<p>“There are reasons for it. I’ve gotten no sleep and been working sort of 110-hour, 120-hour weeks,” he said.<br>“对此我有足够的理由。我没时间睡觉，并且一周连续工作110-120小时”，他解释道。</p>
<p>It’s also a common trait of entrepreneurs that they feel rules don’t apply to them. From their perspective, many rules “get in the way of getting things done,” Freeman said.<br>创业者普遍有一个特质，他们认为规则并不适用。“从他们的角度来说，一些规则总是阻碍把事情搞定。” Freeman说道。</p>
<p>Whatever the exact circumstances of his tweet, Musk would benefit from what Freeman calls “personal boards of directors,” something he often recommends for his entrepreneurial clients. “There are some simple strategies for dealing with impulsivity, like sleep on something overnight and get a second opinion,” he said. “If you’re hard-wired to go full speed ahead at all times, you need to create a filter for yourself to decrease those risk factors.”<br>不管他的推文的具体情况如何，马斯克将会从Freeman所说的“个人董事会”中受益。有些东西他总是推荐给他的企业客户，“有一些简单的方法用于处理冲动，比如睡一觉之后得到第二种想法”，马斯克说道，“如果你在任何时候都要全速前进，你需要为自己创建一个过滤器来减少这些风险因素”。</p>
<p>Tesla’s board should play an important role. “Balancing corporate responsibilities, and the constraints they can impose, against the creativity that made the corporation great in the first place is much more of an art than a science,” said Charles Whitehead, who leads the law, technology and entrepreneurship program at Cornell Law School. “Directors and lawyers need to credibly manage that balance, but as importantly, founders need to be willing to consult with them, recognizing that the advice — even if it slows things down — may simply reflect the realities of the day.”<br>特斯拉的董事会需要扮演一个重要的角色，“相对创造力使得企业领先来说，平衡企业责任，以及他们可以施加的约束更像是一门艺术而非科学”，在康奈尔法学院领导法律、技术和创业项目的Charles Whitehead说道。“董事和律师需要可靠地管理这种平衡， 但更重要的是，创始人意向去和他们咨询、认可简单地反映当今的现实的建议， 尽管它们可能会减缓事情发展的速度”。</p>
<p>Freeman agreed. The Tesla board and others close to Musk “need to find ways to make all the positive aspects of those strengths work for him and for us while minimizing the downside.”<br>Freeman提出，“特斯拉的董事会和其他与马斯克关系密切的人应当找到合适的方法让所有这些优势的工作成为积极方面的同时尽量减少不利方面。”</p>
<p>And Musk may want to curb his use of Twitter. “One good rule of thumb: never make important, and in Tesla’s case, complex announcements through Twitter,” Whitehead said.<br>“马斯克可能想要限制他对Twitter的使用的一个好的原则就是：绝不通过twitter上做出想特斯拉案例中的重要和复杂的通告”，Whitehead说道。</p>
<p>That may be easier said than done. Tesla’s board members have been urging Musk to stop tweeting, so far without success.<br>这可能是说比做容易。特斯拉的董事会成员一直在敦促马斯克停止推特，到目前为止还没有成功。</p>
<p>“It’s not easy for anyone to control the behavior of a grand visionary,” Shane said. “These people don’t like to be controlled.”<br>Shane说道：“要控制一个伟大的梦想家的行为并非易事。这些人从来不喜欢被控制”。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What-Was-Elon-Musk-Thinking&quot;&gt;&lt;a href=&quot;#What-Was-Elon-Musk-Thinking&quot; class=&quot;headerlink&quot; title=&quot;What Was Elon Musk Thinking?&quot;&gt;&lt;/a&gt;&lt;a h
    
    </summary>
    
      <category term="Arts" scheme="http://skyhacks.org/categories/Arts/"/>
    
    
      <category term="Arts" scheme="http://skyhacks.org/tags/Arts/"/>
    
      <category term="Week1" scheme="http://skyhacks.org/tags/Week1/"/>
    
      <category term="Review" scheme="http://skyhacks.org/tags/Review/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 832. Flipping an Image</title>
    <link href="http://skyhacks.org/2018/08/19/LeetCode/LeetCode-FlippingAnImage/"/>
    <id>http://skyhacks.org/2018/08/19/LeetCode/LeetCode-FlippingAnImage/</id>
    <published>2018-08-19T01:29:04.000Z</published>
    <updated>2018-08-22T15:53:05.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a><a href="https://leetcode.com/problems/flipping-an-image" target="_blank" rel="external">题目描述</a>：</h2><p>Given a binary matrix A, we want to flip the image horizontally, then invert it, and return the resulting image.<br>To flip an image horizontally means that each row of the image is reversed.  For example, flipping [1, 1, 0] horizontally results in [0, 1, 1].<br>To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0. For example, inverting [0, 1, 1] results in [1, 0, 0].</p>
<p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Input: [[1,1,0],[1,0,1],[0,0,0]]</div><div class="line">Output: [[1,0,0],[0,1,0],[1,1,1]]</div><div class="line">Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].</div><div class="line">Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]</div></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Input: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]</div><div class="line">Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</div><div class="line">Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].</div><div class="line">Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</div></pre></td></tr></table></figure></p>
<p><strong>Note:</strong><br>    <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> &lt;= A.length = A[<span class="number">0</span>].length &lt;= <span class="number">20</span></div><div class="line"><span class="number">0</span> &lt;= A[i][j] &lt;= <span class="number">1</span></div></pre></td></tr></table></figure></p>
<h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>根据给出的例子可以发现规则：<br>翻转图像矩阵的每一行，并且对每一个元素取反</p>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><hr>
<p>这道题总共要做2件事：</p>
<pre><code>1. 数组中的每个单元逆序
2. 数组中的每个单元内的元素求反
</code></pre><p>参考LeetCode Discuss：<br><a href="https://leetcode.com/problems/flipping-an-image/discuss/130590/C++JavaPython-Reverse-and-Toggle" target="_blank" rel="external">https://leetcode.com/problems/flipping-an-image/discuss/130590/C++JavaPython-Reverse-and-Toggle</a></p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; flipAndInvertImage(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; A) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; vRes = A;</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> == vRes.size()) <span class="keyword">return</span> vRes;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; vRes.size(); idx++) &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v = vRes[idx];</div><div class="line">            reverse(v.begin(), v.end());</div><div class="line"></div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.begin();</div><div class="line">            <span class="keyword">for</span> (; it != v.end(); it++) &#123;</div><div class="line">                *it = *it ^ <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> vRes;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong><br>此题元素求反可以考虑（数组内的元素非0即1）：</p>
<pre><code>1. 元素本身异或
2. 元素本身求反
3. 代码本身判断
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/flipping-an-image&quot; target=&quot;_blan
    
    </summary>
    
      <category term="LeetCode" scheme="http://skyhacks.org/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://skyhacks.org/tags/LeetCode/"/>
    
      <category term="Algorithms" scheme="http://skyhacks.org/tags/Algorithms/"/>
    
      <category term="Data Structure" scheme="http://skyhacks.org/tags/Data-Structure/"/>
    
      <category term="Array" scheme="http://skyhacks.org/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>ARTS - 左耳听风群的每周必做</title>
    <link href="http://skyhacks.org/2018/08/14/Arts/MyArtsPlan/"/>
    <id>http://skyhacks.org/2018/08/14/Arts/MyArtsPlan/</id>
    <published>2018-08-14T15:14:41.000Z</published>
    <updated>2018-08-24T16:09:55.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>每周至少做一个leetcode算法题</p>
<ul>
<li>week1: <a href="http://skyhacks.org/2018/08/21/Arts/Week1/Arts-Share-Week1-HowToWork/">832.Flipping an Image</a></li>
</ul>
<hr>
<h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p>每周阅读至少一篇英文技术文章</p>
<ul>
<li>week1: <a href="http://skyhacks.org/2018/08/20/Arts/Week1/Arts-Review_Week1-ElonMuskThinking/">马斯克在想什么？</a></li>
</ul>
<hr>
<h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><p>每周学习至少一个技术技巧, 最好是实际工作学到的</p>
<ul>
<li>week1: <a href="http://skyhacks.org/2018/08/20/Arts/Week1/Arts-Tip_Week1-GitLineEndingCharacter/">Git换行符LF与CRLF转换问题</a></li>
</ul>
<hr>
<h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><p>每周分享一篇有观点和思考的技术文章</p>
<ul>
<li>week1: <a href="http://skyhacks.org/2018/08/21/Arts/Week1/Arts-Share-Week1-HowToWork/">不做伪工作者</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm&quot;&gt;&lt;a href=&quot;#Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Algorithm&quot;&gt;&lt;/a&gt;Algorithm&lt;/h2&gt;&lt;p&gt;每周至少做一个leetcode算法题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;week1: &lt;a 
    
    </summary>
    
      <category term="Arts" scheme="http://skyhacks.org/categories/Arts/"/>
    
    
      <category term="Arts" scheme="http://skyhacks.org/tags/Arts/"/>
    
      <category term="Blog" scheme="http://skyhacks.org/tags/Blog/"/>
    
      <category term="GitHub" scheme="http://skyhacks.org/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 717. 1-bit and 2-bit Characters</title>
    <link href="http://skyhacks.org/2017/12/01/LeetCode/LeetCode-1-bitand2-bitCharacters/"/>
    <id>http://skyhacks.org/2017/12/01/LeetCode/LeetCode-1-bitand2-bitCharacters/</id>
    <published>2017-12-01T09:22:49.000Z</published>
    <updated>2018-08-19T01:41:47.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a><a href="https://leetcode.com/problems/1-bit-and-2-bit-characters" target="_blank" rel="external">题目描述</a>：</h2><p>We have two special characters. The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11).<br>Now given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.</p>
<p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">bits = [1, 0, 0]</div><div class="line">Output: True</div><div class="line">Explanation:</div><div class="line">The only way to decode it is two-bit character and one-bit character. So the last character</div><div class="line">is one-bit character.</div></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">bits = [1, 1, 1, 0]</div><div class="line">Output: False</div><div class="line">Explanation:</div><div class="line">The only way to decode it is two-bit character and two-bit character. So the last character</div><div class="line">is NOT one-bit character.</div></pre></td></tr></table></figure></p>
<p><strong>Note:</strong><br>    <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> &lt;= len(bits) &lt;= <span class="number">1000.</span></div><div class="line">bits[i] is always <span class="number">0</span> <span class="keyword">or</span> <span class="number">1.</span></div></pre></td></tr></table></figure></p>
<h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>01序列由三种成分构成：10, 11, 0<br>求序列经过解析后，最后一个成分是否为0</p>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><hr>
<p>这道题就是已知一个字符串（最后一个字符0）和三种构成成分，判定该字符串是否合法。<br>观察三种字符串可以发现，两bits的只有10和11两种（第一个bit都是1，第二bit随意），一个bit的只有0满足。<br>转变思路后就是检查一个最后一个bit是0的字符串中是否存在单个bit是1的情况（00可以解析为2个bit的0组成）。</p>
<p>参考LeetCode Discuss：<br><a href="https://discuss.leetcode.com/topic/108743/java-solution-1-or-2/4" target="_blank" rel="external">https://discuss.leetcode.com/topic/108743/java-solution-1-or-2/4</a></p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isOneBitCharacter</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; bits)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = bits.size(), i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (i &lt; n<span class="number">-1</span>) i += bits[i]+<span class="number">1</span>; </div><div class="line">        <span class="keyword">return</span> i == n<span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong><br>此题没有运用一个通用的算法，而是根据题目的特性做出解答，具体步骤就是</p>
<pre><code>1. 放置一个指针在字符串首位用于遍历
2. 每次看见0的时候，往前走1步
3. 每次看见1的时候（可以认为是发现11或者10），往前走2步
4. 假如出现单个1的时候，指针往前走2步就可能超过字符串的本身长度，这种情况就是不符合题意的case。
正常遍历是可以最终到达n-1的位置（n为字符串长度）
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/1-bit-and-2-bit-characters&quot; targ
    
    </summary>
    
      <category term="LeetCode" scheme="http://skyhacks.org/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://skyhacks.org/tags/LeetCode/"/>
    
      <category term="Algorithms" scheme="http://skyhacks.org/tags/Algorithms/"/>
    
      <category term="Data Structure" scheme="http://skyhacks.org/tags/Data-Structure/"/>
    
      <category term="Array" scheme="http://skyhacks.org/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 169. Majority Element II</title>
    <link href="http://skyhacks.org/2017/11/28/LeetCode/LeetCode-MajorityElementII/"/>
    <id>http://skyhacks.org/2017/11/28/LeetCode/LeetCode-MajorityElementII/</id>
    <published>2017-11-28T03:42:33.000Z</published>
    <updated>2018-08-14T15:31:31.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a><a href="https://leetcode.com/problems/majority-element-ii" target="_blank" rel="external">题目描述</a>：</h2><p>Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. The algorithm should run in linear time and in O(1) space.<br>Hint:<br>How many majority elements could it possibly have?</p>
<h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>给定一个大小为n的整数数组，从中找出所有出现次数超过 ⌊ n/3 ⌋ 的元素。算法应该满足线性时间复杂度和O(1)空间复杂度。<br>提示：<br>一共可能有多少个“众数”？</p>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><hr>
<p>可以从<a href="http://blog.csdn.net/chfe007/article/details/42919017" target="_blank" rel="external">Moore’s voting algorithm</a>中得到一些启发</p>
<p>参考LeetCode Discuss：<br><a href="https://leetcode.com/discuss/43248/boyer-moore-majority-vote-algorithm-and-my-elaboration" target="_blank" rel="external">https://leetcode.com/discuss/43248/boyer-moore-majority-vote-algorithm-and-my-elaboration</a></p>
<p>观察可知，数组中至多可能会有2个出现次数超过 ⌊ n/3 ⌋ 的众数<br>记变量n1, n2为候选众数； c1, c2为它们对应的出现次数<br>遍历数组，记当前数字为num<br>若num与n1或n2相同，则将其对应的出现次数加1<br>否则，若c1或c2为0，则将其置为1，对应的候选众数置为num<br>否则，将c1与c2分别减1<br>最后，再统计一次候选众数在数组中出现的次数，若满足要求，则返回之。</p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; majorityElement(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; majorList;</div><div class="line">        <span class="comment">// first round to find the candidates</span></div><div class="line">        <span class="keyword">int</span> count1 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> candidate1 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> count2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> candidate2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</div><div class="line">             <span class="comment">// every iteration deal with one possibility</span></div><div class="line">            <span class="keyword">if</span> (candidate1 == nums[i]) count1++;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (candidate2 == nums[i]) count2++;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == count1) &#123;</div><div class="line">                count1 = <span class="number">1</span>;</div><div class="line">                candidate1 = nums[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == count2) &#123;</div><div class="line">                count2 = <span class="number">1</span>;</div><div class="line">                candidate2 = nums[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                count1--;</div><div class="line">                count2--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// second round to check</span></div><div class="line">        <span class="comment">// notice that num1 and num2 can be the same, but in the following we only count once!</span></div><div class="line">        count1 = count2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[i] == candidate1) count1++;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] == candidate2) count2++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (nums.size()/<span class="number">3</span> &lt; count1)</div><div class="line">            majorList.push_back(candidate1);</div><div class="line">        <span class="keyword">if</span> (nums.size()/<span class="number">3</span> &lt; count2)</div><div class="line">            majorList.push_back(candidate2);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> majorList;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong><br>此题是<a href="http://skyhacks.org/2017/11/24/LeetCode-MajorityElement">LeetCode 169. Majority Element</a>的加强版，同时要找出大于n/3的众数，难点在于</p>
<pre><code>1. 时间复杂度O(n)，空间复杂度O(1) -- 注定只能遍历元素，并且用单个变量来完成计数
2. 众数的条件是n/3
</code></pre><p>针对此题的n/3的进行深入分析，可以发现有三种情况：</p>
<pre><code>1. 不存在大于n/3的众数，第一轮结束后，第二轮check时候就会把非众数都过滤掉。
2. 只存在1个大于n/3的众数, 其余元素个数总数小于2n/3。递减(pair out)时候可以保证众数的count不为0, 第二轮check时候
就会把非众数都过滤掉。
3. 存在2个大于n/3的众数，其余元素都小于n/3。递减(pair out)时候可以保证2个众数的count不为0, 第二轮check时候
就会把非众数都过滤掉。
</code></pre><p><strong>Boyer-Moore Majority Vote algorithm</strong>的拓展：</p>
<ol>
<li><a href="https://discuss.leetcode.com/topic/65042/my-understanding-of-boyer-moore-majority-vote" target="_blank" rel="external">https://discuss.leetcode.com/topic/65042/my-understanding-of-boyer-moore-majority-vote</a></li>
<li><a href="https://gregable.com/2013/10/majority-vote-algorithm-find-majority.html" target="_blank" rel="external">https://gregable.com/2013/10/majority-vote-algorithm-find-majority.html</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/majority-element-ii&quot; target=&quot;_bl
    
    </summary>
    
      <category term="LeetCode" scheme="http://skyhacks.org/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://skyhacks.org/tags/LeetCode/"/>
    
      <category term="Algorithms" scheme="http://skyhacks.org/tags/Algorithms/"/>
    
      <category term="Data Structure" scheme="http://skyhacks.org/tags/Data-Structure/"/>
    
      <category term="Array" scheme="http://skyhacks.org/tags/Array/"/>
    
      <category term="Majority Element" scheme="http://skyhacks.org/tags/Majority-Element/"/>
    
      <category term="Moore’s voting algorithm" scheme="http://skyhacks.org/tags/Moore%E2%80%99s-voting-algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 169. Majority Element</title>
    <link href="http://skyhacks.org/2017/11/24/LeetCode/LeetCode-MajorityElement/"/>
    <id>http://skyhacks.org/2017/11/24/LeetCode/LeetCode-MajorityElement/</id>
    <published>2017-11-24T09:27:42.000Z</published>
    <updated>2018-08-14T15:31:31.445Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a><a href="https://leetcode.com/problems/majority-element/description/" target="_blank" rel="external">题目描述</a>：</h2><p>Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.<br>You may assume that the array is non-empty and the majority element always exist in the array.</p>
<h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>给定一个长度为n的数组，寻找其中的“众数”。众数是指出现次数大于 ⌊ n/2 ⌋ 的元素。<br>你可以假设数组是非空的并且数组中的众数永远存在。</p>
<h2 id="参考LeetCode-Discuss："><a href="#参考LeetCode-Discuss：" class="headerlink" title="参考LeetCode Discuss："></a>参考LeetCode Discuss：</h2><p><a href="https://discuss.leetcode.com/topic/8692/o-n-time-o-1-space-fastest-solution/20" target="_blank" rel="external">https://discuss.leetcode.com/topic/8692/o-n-time-o-1-space-fastest-solution/20</a><br><a href="https://discuss.leetcode.com/topic/17446/6-suggested-solutions-in-c-with-explanations" target="_blank" rel="external">https://discuss.leetcode.com/topic/17446/6-suggested-solutions-in-c-with-explanations</a></p>
<h3 id="解题思路1："><a href="#解题思路1：" class="headerlink" title="解题思路1："></a>解题思路1：</h3><hr>
<p>HashTable：使用HashTasble给每个出现的元素计数，遍历数组，发现超过半数的众数就返回。</p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mapNums;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i) &#123;</div><div class="line">            ++mapNums[nums[i]];</div><div class="line">            <span class="keyword">if</span> (mapNums[nums[i]] &gt; nums.size() / <span class="number">2</span>) <span class="keyword">return</span> nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong><br>时间复杂度满足O(n)，但是由于HashTable（unordered_map）的存在，空间复杂度就不能满足O(1)。</p>
<h3 id="解题思路2："><a href="#解题思路2：" class="headerlink" title="解题思路2："></a>解题思路2：</h3><hr>
<p>排序：排序的结果就是众数如果存在，中间的元素一定是众数（过半）</p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        sort(nums.begin(), nums.end());</div><div class="line">        <span class="keyword">return</span> (nums.size() / <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong></p>
<ol>
<li>时间复杂度主要在排序上， N*log2(N)</li>
<li>如果数组为空或者不存在众数，上述代码需要考虑更全面些 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        sort(nums.begin(), nums.end());</div><div class="line">        <span class="keyword">int</span> pivot = nums.size() / <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pivot; i &lt; nums.size(); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[pivot] != nums[i]) <span class="keyword">break</span>;</div><div class="line">            count++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pivot - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[pivot] != nums[i]) <span class="keyword">break</span>;</div><div class="line">            count++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (count &gt; pivot) <span class="keyword">return</span> nums[pivot];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="解题思路3："><a href="#解题思路3：" class="headerlink" title="解题思路3："></a>解题思路3：</h3><hr>
<p>投票算法：遍历元素，利用candidate 和 count两个变量找到众数。（前提：众数一定存在）</p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> major = nums, counts = <span class="number">0</span>, n = nums.size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (!counts) &#123;</div><div class="line">                major = nums[i];</div><div class="line">                counts = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> counts += (nums[i] == major) ? <span class="number">1</span> : <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> major;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong><br><a href="http://blog.csdn.net/chfe007/article/details/42919017" target="_blank" rel="external">Moore’s voting algorithm</a>是比较有意思的一个算法，在dicuss上看到的。这个算法是解决这样一个问题：从一个数组中找出出现半数以上的元素。大意是这样：</p>
<blockquote>
<p>We will sweep down the sequence starting at the pointer position shown above. As we sweep we maintain a pair consisting of a current candidate and a counter. Initially, the current candidate is unknown and the counter is 0.<br>When we move the pointer forward over an element e:</p>
<ul>
<li>If the counter is 0, we set the current candidate to e and we set the counter to 1.</li>
<li>If the counter is not 0, we increment or decrement the counter according to whether e is the current candidate.<br>When we are done, the current candidate is the majority element, if there is a majority.</li>
</ul>
</blockquote>
<p><strong>“投票算法”</strong><br>设定两个变量candidate和count。candidate保存当前可能的候选众数，count保存该候选众数的出现次数。<br>遍历数组num。<br>如果当前的数字e与候选众数candidate相同，则将计数count + 1<br>否则，如果当前的候选众数candidate为空，或者count为0，则将候选众数candidate的值置为e，并将计数count置为1。<br>否则，将计数count - 1<br>最终留下的候选众数candidate即为最终答案。<br>以上算法时间复杂度为O(n)，空间复杂度为O(1)</p>
<h2 id="官方解析："><a href="#官方解析：" class="headerlink" title="官方解析："></a>官方解析：</h2><p>时间复杂度: O(n2) — 蛮力法: 依次检查每一个元素是否为众数<br>时间复杂度: O(n), 空间复杂度: O(n) — 哈希表: 维护一个每一个元素出现次数的哈希表, 然后找到出现次数最多的元素<br>时间复杂度: O(n log n) — 排序: 在排序后找出连续重复出现次数最多的元素<br>平均时间复杂度: O(n), 最坏复杂度: 无穷大 — 随机算法: 随机选取一个元素计算其是否为众数. 如果不是, 就重复上一步骤直到找到为止。 由于选出众数的概率 &gt; 1 / 2, 因此期望的尝试次数 &lt; 2<br>时间复杂度: O(n log n) — 分治法: 将数组拆成2半, 然后找出前一半的众数A和后一半的众数B。则全局众数要么是A要么是B。 如果 A == B, 则它自然而然就是全局众数。 如果不是, 则A和B都是候选众数, 则至多只需要检查这两个元素的出现次数即可。 时间复杂度, T(n) = T(n/2) + 2n = O(n log n).<br>时间复杂度: O(n) — Moore投票算法: 我们维护一个当前的候选众数和一个初始为0的计数器。遍历数组时，我们看当前的元素x:</p>
<pre><code>* 如果计数器是0, 我们将候选众数置为 x 并将计数器置为 1
* 如果计数器非0, 我们根据x与当前的候选众数是否相等对计数器+1或者-1
* 一趟之后, 当前的候选众数就是所求众数. 时间复杂度 = O(n).
</code></pre><p>时间复杂度: O(n) — 位操作法: 我们需要32次迭代, 每一次计算所有n个数的第i位的1的个数。由于众数一定存在，那么或者1的个数&gt;0的个数 或者反过来(但绝不会相同)。 众数的第i位一定是计数较多数字。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/majority-element/description/&quot; t
    
    </summary>
    
      <category term="LeetCode" scheme="http://skyhacks.org/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://skyhacks.org/tags/LeetCode/"/>
    
      <category term="Algorithms" scheme="http://skyhacks.org/tags/Algorithms/"/>
    
      <category term="Data Structure" scheme="http://skyhacks.org/tags/Data-Structure/"/>
    
      <category term="Array" scheme="http://skyhacks.org/tags/Array/"/>
    
      <category term="Sort" scheme="http://skyhacks.org/tags/Sort/"/>
    
      <category term="HashTable" scheme="http://skyhacks.org/tags/HashTable/"/>
    
      <category term="Majority Element" scheme="http://skyhacks.org/tags/Majority-Element/"/>
    
      <category term="Moore’s voting algorithm" scheme="http://skyhacks.org/tags/Moore%E2%80%99s-voting-algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 121. Best Time to Buy and Sell Stock</title>
    <link href="http://skyhacks.org/2017/11/23/LeetCode/LeetCode-BestTimetoBuyandSellStock/"/>
    <id>http://skyhacks.org/2017/11/23/LeetCode/LeetCode-BestTimetoBuyandSellStock/</id>
    <published>2017-11-23T04:11:53.000Z</published>
    <updated>2018-08-14T15:31:31.445Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/" target="_blank" rel="external">题目描述</a>：</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.<br>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Input: [7, 1, 5, 3, 6, 4]</div><div class="line">Output: 5</div><div class="line"></div><div class="line">max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)</div></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Input: [7, 6, 4, 3, 1]</div><div class="line">Output: 0</div><div class="line"></div><div class="line">In this case, no transaction is done, i.e. max profit = 0.</div></pre></td></tr></table></figure></p>
<h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>给一个数组prices[]，prices[i]代表股票在第i天的售价，求出只做一次交易(一次买入和卖出)能得到的最大收益。 </p>
<h3 id="解题思路1："><a href="#解题思路1：" class="headerlink" title="解题思路1："></a>解题思路1：</h3><hr>
<p>Brute &amp; Force（直观做法）: 两个循环，逐一找到每两个元素的差值，取最大的即为为maxProfit，时间复杂度O(n^2)</p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> maxProfit = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.size(); i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; prices.size(); j++) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="number">0</span> &lt; prices[j] - prices[i])</div><div class="line">                    maxProfit = max(prices[j] - prices[i], maxProfit);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> maxProfit;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong></p>
<pre><code>1. 遍历数组，找到MaxProfit（效率较低）
2. 保证每一次比较的差值都是正值即可
</code></pre><h3 id="解题思路2："><a href="#解题思路2：" class="headerlink" title="解题思路2："></a>解题思路2：</h3><hr>
<p>根据题目意思，只需要找出一次交易的最大的差值。对于此题就是要找到最小值（下限）和最大值（上限）。<br>只要能固定住其中之一，就可以通过一次遍历，时间复杂度O(n)，找到maxProfit.<br>参考LeetCode Discuss：<br><a href="https://discuss.leetcode.com/topic/5863/sharing-my-simple-and-clear-c-solution/2" target="_blank" rel="external">https://discuss.leetcode.com/topic/5863/sharing-my-simple-and-clear-c-solution/2</a><br><a href="https://discuss.leetcode.com/topic/2763/a-o-1-n-solution" target="_blank" rel="external">https://discuss.leetcode.com/topic/2763/a-o-1-n-solution</a></p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> maxProfit = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> minPrice = INT_MAX;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.size(); i++) &#123;</div><div class="line">            minPrice = min(minPrice, prices[i]);</div><div class="line">            maxProfit = max(maxProfit, prices[i] - minPrice);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> maxProfit;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong></p>
<pre><code>1. 将如何获得maxProfit的问题转化为：取出maxProfit和prices[i] - minPrice之间的最大差值
2. 通过观察发现并不是每一次迭代都需要去计算minPrice，可以优化为以下代码
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> maxProfit = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> minPrice = INT_MAX;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.size(); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (prices[i] &lt; minPrice)</div><div class="line">                minPrice = min(minPrice , prices[i]);</div><div class="line">            maxProfit = max(maxProfit, prices[i] - minPrice);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> maxProfit;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</code></pre><p><strong>拓展:</strong><br>    <a href="https://discuss.leetcode.com/topic/19853/kadane-s-algorithm-since-no-one-has-mentioned-about-this-so-far-in-case-if-interviewer-twists-the-input/5" target="_blank" rel="external">Kadane’s Algorithm</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
    
    </summary>
    
      <category term="LeetCode" scheme="http://skyhacks.org/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://skyhacks.org/tags/LeetCode/"/>
    
      <category term="Algorithms" scheme="http://skyhacks.org/tags/Algorithms/"/>
    
      <category term="Data Structure" scheme="http://skyhacks.org/tags/Data-Structure/"/>
    
      <category term="Array" scheme="http://skyhacks.org/tags/Array/"/>
    
      <category term="Kadane&#39;s Algorithm" scheme="http://skyhacks.org/tags/Kadane-s-Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 122. Best Time to Buy and Sell Stock II</title>
    <link href="http://skyhacks.org/2017/11/21/LeetCode/LeetCode-BestTimetoBuyandSellStockII/"/>
    <id>http://skyhacks.org/2017/11/21/LeetCode/LeetCode-BestTimetoBuyandSellStockII/</id>
    <published>2017-11-21T02:30:50.000Z</published>
    <updated>2018-08-14T15:31:31.445Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/" target="_blank" rel="external">题目描述</a>：</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.<br>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>
<h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>假设有一个数组，它的第i个元素是一个给定的股票在第i天的价格。设计一个算法来找到最大的利润。你可以完成尽可能多的交易(多次买卖股票)。然而,你不能同时参与多个交易(你必须在再次购买前出售股票)。<br>给出一个数组样例[2,1,2,0,1], 返回 2</p>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><hr>
<p>这个是一道DP(动态规划)的题。总的来说就是如何N天的总利润如何最大呢？就是一旦有获利空间就去赚钱，所以就是把每两天的价格增长量加起来就是总利润了，如果存在两天的价格增长量为负，那么就不进行交易。同一天买卖，收益为0，所以需要隔天买卖，保证利润增值。<br>参考LeetCode Discuss：<br><a href="https://discuss.leetcode.com/topic/17081/three-lines-in-c-with-explanation" target="_blank" rel="external">https://discuss.leetcode.com/topic/17081/three-lines-in-c-with-explanation</a></p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;prices)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> p = <span class="number">1</span>; p &lt; prices.size(); ++p)</div><div class="line">          <span class="comment">// Only consider positive value to make sure get max profit</span></div><div class="line">          ret += max(prices[p] - prices[p - <span class="number">1</span>], <span class="number">0</span>); </div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong></p>
<pre><code>1. 题意为给定一个数组，数组中第i个元素的值对应着第i天的股票，你可以完成多次交易，但是每次交易只能买入一次并卖出,求进行
多次交易所能得到的最大利润。该题为Best Time to Buy and Sell Stock的加强版。
2. 与Best Time to Buy and Sell Stock类似，该题同样考查的是最大差值。只不过该题考查数组中所有相邻且递增元素
的数值之差的总和。只要第i+1天的值大于第i天的值，则可买入，求得利润（差值），遍历整个数组，得到所用差值之和即为总的利润。
负值则跳过。充分体现了DP的精髓，局部最优就是整体最优解。
3. 假设有四个数字，&quot;a &lt;= b &lt;= c &lt;= d&quot;, the profit is &quot;d - a = (b - a) + (c - b) + (d - c)&quot;。
例如[5,8,9,10],maxProfit=(8-5)+(9-8)+(10-9)=10-5=5; // 这是理想情况
假如其中有负值，则跳过这几个元素，直到获取正值，保证利润都是递增。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-
    
    </summary>
    
      <category term="LeetCode" scheme="http://skyhacks.org/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://skyhacks.org/tags/LeetCode/"/>
    
      <category term="Algorithms" scheme="http://skyhacks.org/tags/Algorithms/"/>
    
      <category term="Data Structure" scheme="http://skyhacks.org/tags/Data-Structure/"/>
    
      <category term="Array" scheme="http://skyhacks.org/tags/Array/"/>
    
      <category term="DP" scheme="http://skyhacks.org/tags/DP/"/>
    
      <category term="Dynamic Programming" scheme="http://skyhacks.org/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 463. Island Perimeter</title>
    <link href="http://skyhacks.org/2017/11/17/LeetCode/LeetCode-IslandPerimeter/"/>
    <id>http://skyhacks.org/2017/11/17/LeetCode/LeetCode-IslandPerimeter/</id>
    <published>2017-11-17T08:09:05.000Z</published>
    <updated>2017-11-20T13:16:51.145Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a><a href="https://leetcode.com/problems/island-perimeter/description/" target="_blank" rel="external">题目描述</a>：</h2><p>You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn’t have “lakes” (water inside that isn’t connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don’t exceed 100. Determine the perimeter of the island.<br><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[[0,1,0,0],</div><div class="line">[1,1,1,0],</div><div class="line">[0,1,0,0],</div><div class="line">[1,1,0,0]]</div><div class="line"></div><div class="line">Answer: 16</div></pre></td></tr></table></figure></p>
<p>Explanation: The perimeter is the 16 yellow stripes in the image below:<br><img src="http://otqlqfy9h.bkt.clouddn.com/images/2017-11-17/2017_11_17_1.png"></p>
<h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>给定一个二维地图，1表示陆地，0表示水域。单元格水平或者竖直相连（不含对角线）。地图完全被水域环绕，只包含一个岛屿（也就是说，一个或者多个相连的陆地单元格）。岛屿没有湖泊（岛屿内部环绕的水域）。单元格是边长为1的正方形。地图是矩形，长宽不超过100。计算岛屿的周长。</p>
<h3 id="解题思路1："><a href="#解题思路1：" class="headerlink" title="解题思路1："></a>解题思路1：</h3><hr>
<p>DFS：深度优先遍历（递归实现）, 虑每个元素的四个方向，如果是边界或者0，则perimeter+1。<br>参考LeetCode Discuss：<br><a href="https://discuss.leetcode.com/topic/106301/java-c-straightforward-dfs-solution" target="_blank" rel="external">https://discuss.leetcode.com/topic/106301/java-c-straightforward-dfs-solution</a><br><a href="https://discuss.leetcode.com/topic/106261/java-c-clean-code" target="_blank" rel="external">https://discuss.leetcode.com/topic/106261/java-c-clean-code</a></p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">islandPerimeter</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp; grid)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> m = grid.size();</div><div class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].size();</div><div class="line">        <span class="keyword">int</span> nums = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="number">1</span> == grid[i][j])</div><div class="line">                    nums += bfs(grid, i, j);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nums;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp; grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= grid.size() || j &lt; <span class="number">0</span> || j &gt;= grid[<span class="number">0</span>].size()</div><div class="line">            || <span class="number">0</span> == grid[i][j])</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// stripes</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">-1</span> == grid[i][j])</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            grid[i][j] = <span class="number">-1</span>; <span class="comment">// mark visited</span></div><div class="line">            <span class="keyword">return</span> dfs(grid, i - <span class="number">1</span>, j) + dfs(grid, i + <span class="number">1</span>, j)</div><div class="line">            + dfs(grid, i, j - <span class="number">1</span>) + dfs(grid, i, j + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong></p>
<pre><code>1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素
2. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]
3. 如果是边界点或者grid[i][j]为0的情况，则perimeter + 1
4. 访问过的元素置为-1，与原数组元素值区分。
5. 二维数组的vector表示
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> arr[<span class="number">4</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; grid(<span class="number">4</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.size(); i++)</div><div class="line">    grid[i].resize(<span class="number">4</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</div><div class="line">        grid[i][j] = arr[i][j];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h3 id="解题思路2："><a href="#解题思路2：" class="headerlink" title="解题思路2："></a>解题思路2：</h3><hr>
<p>BFS：广度优先遍历（借助队列迭代实现）<br>参考LeetCode Discuss：</p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">islandPerimeter</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp; grid)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> m = grid.size();</div><div class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].size();</div><div class="line">        <span class="keyword">int</span> nums = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="number">1</span> == grid[i][j])</div><div class="line">                    nums += bfs(grid, i, j);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nums;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp; grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;</div><div class="line">        grid[i][j] = <span class="number">-1</span>; <span class="comment">// visited</span></div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dir(&#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;); <span class="comment">// c++11/14</span></div><div class="line">        <span class="comment">// int nums[] = &#123;-1, 0, 1, 0, -1&#125;;</span></div><div class="line">        <span class="comment">// vector&lt;int&gt; dir(nums, nums + sizeof(nums) / sizeof(int));</span></div><div class="line">        q.push(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(i, j));</div><div class="line">        <span class="keyword">int</span> nums = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (<span class="number">0</span> &lt; q.size()) &#123;</div><div class="line">            <span class="keyword">int</span> m = q.front().first; <span class="comment">// row index</span></div><div class="line">            <span class="keyword">int</span> n = q.front().second; <span class="comment">// col index</span></div><div class="line">            q.pop(); <span class="comment">// remove from queue</span></div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; dir.size() - <span class="number">1</span>; idx++) &#123;</div><div class="line">                <span class="keyword">int</span> rowIdx = m + dir[idx]; <span class="comment">// row index</span></div><div class="line">                <span class="keyword">int</span> colIdx = n + dir[idx + <span class="number">1</span>]; <span class="comment">// col index</span></div><div class="line">                <span class="keyword">if</span> (rowIdx &lt; <span class="number">0</span> || rowIdx &gt;= grid.size() || colIdx &lt; <span class="number">0</span> || colIdx &gt;= grid[<span class="number">0</span>].size()</div><div class="line">                    || <span class="number">0</span> == grid[rowIdx][colIdx])</div><div class="line">                    nums++; <span class="comment">//  accumulate stripes</span></div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">-1</span> == grid[rowIdx][colIdx])</div><div class="line">                    <span class="keyword">continue</span>; <span class="comment">// skip visted item</span></div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    q.push(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(rowIdx, colIdx));</div><div class="line">                    grid[rowIdx][colIdx] = <span class="number">-1</span>; <span class="comment">// mark visited</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nums;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong></p>
<pre><code>1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素
2. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]
3. 如果是边界点或者grid[i][j]为0的情况，则perimeter + 1
4. 访问过的元素置为-1，与原数组元素值区分。
5. 二维数组的vector表示
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> arr[<span class="number">4</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; grid(<span class="number">4</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.size(); i++)</div><div class="line">    grid[i].resize(<span class="number">4</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</div><div class="line">        grid[i][j] = arr[i][j];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h3 id="解题思路3："><a href="#解题思路3：" class="headerlink" title="解题思路3："></a>解题思路3：</h3><hr>
<p>代码简洁的全遍历，复杂度O(n)。<br>参考LeetCode Discuss：<br><a href="https://discuss.leetcode.com/topic/111260/c-short-and-fast-beats-93" target="_blank" rel="external">https://discuss.leetcode.com/topic/111260/c-short-and-fast-beats-93</a></p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">islandPerimeter</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.size(); ++i)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[i].size(); ++j)</div><div class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>)</div><div class="line">                    p += (i == <span class="number">0</span> || grid[i - <span class="number">1</span>][j] == <span class="number">0</span>) + (i == grid.size() - <span class="number">1</span> || grid[i + <span class="number">1</span>][j] == <span class="number">0</span>) +</div><div class="line">                         (j == <span class="number">0</span> || grid[i][j - <span class="number">1</span>] == <span class="number">0</span>) + (j == grid[i].size() - <span class="number">1</span> || grid[i][j + <span class="number">1</span>] == <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong></p>
<pre><code>1. 代的方式进行全遍历，代码比较简洁。不过就是循环内嵌套过多的逻辑判断，效率比较低。
2. 关注点在确定当前grid[i][j]为1后，观察四个方向的元素是否为0，如果是则+1.如果是i = 0或者j=0的边界则直接+1；
</code></pre><h3 id="解题思路4："><a href="#解题思路4：" class="headerlink" title="解题思路4："></a>解题思路4：</h3><hr>
<pre><code>1. 确定“1”的个数，如果没有相邻包围的元素的话，perimeter为“1”的个数×4
2. 确定相邻的元素边界墙的个数，需要减去从上述结果中减去2×边界墙个数
</code></pre><p>参考LeetCode Discuss：<br><a href="https://discuss.leetcode.com/topic/68845/c-solution-with-explanation" target="_blank" rel="external">https://discuss.leetcode.com/topic/68845/c-solution-with-explanation</a></p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">islandPerimeter</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count=<span class="number">0</span>, repeat=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;grid.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;grid[i].size();j++)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(grid[i][j]==<span class="number">1</span>)</div><div class="line">                    &#123;</div><div class="line">                        count ++;</div><div class="line">                        <span class="keyword">if</span>(i!=<span class="number">0</span> &amp;&amp; grid[i<span class="number">-1</span>][j] == <span class="number">1</span>) repeat++;</div><div class="line">                        <span class="keyword">if</span>(j!=<span class="number">0</span> &amp;&amp; grid[i][j<span class="number">-1</span>] == <span class="number">1</span>) repeat++;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">4</span>*count-repeat*<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong><br>总周长perimeter的解法一般两种：</p>
<pre><code>1. “1”元素总长-相邻边×2
2. perimeter=边界元素个数+与“0”相邻元素个数
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/island-perimeter/description/&quot; t
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://skyhacks.org/tags/LeetCode/"/>
    
      <category term="Algorithms" scheme="http://skyhacks.org/tags/Algorithms/"/>
    
      <category term="Data Structure" scheme="http://skyhacks.org/tags/Data-Structure/"/>
    
      <category term="Array" scheme="http://skyhacks.org/tags/Array/"/>
    
      <category term="BFS" scheme="http://skyhacks.org/tags/BFS/"/>
    
      <category term="DFS" scheme="http://skyhacks.org/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 200. Number of Islands</title>
    <link href="http://skyhacks.org/2017/11/17/LeetCode/LeetCode-NumberofIslands/"/>
    <id>http://skyhacks.org/2017/11/17/LeetCode/LeetCode-NumberofIslands/</id>
    <published>2017-11-17T01:40:59.000Z</published>
    <updated>2017-11-20T13:16:51.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a><a href="https://leetcode.com/problems/number-of-islands/description/" target="_blank" rel="external">题目描述</a>：</h2><p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.<br><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">11110</div><div class="line">11010</div><div class="line">11000</div><div class="line">00000</div></pre></td></tr></table></figure></p>
<p>Answer: 1<br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">11000</div><div class="line">11000</div><div class="line">00100</div><div class="line">00011</div></pre></td></tr></table></figure></p>
<p>Answer: 3</p>
<h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>给定一个由字符‘1’（陆地）和‘0’（水域）组成的二维网格地图，计算岛屿的个数。岛屿被水域环绕，由竖直或者水平方向邻接的陆地构成。你可以假设网格地图的四条边都被水域包围。<br>测试样例见题目描述</p>
<h3 id="解题思路1："><a href="#解题思路1：" class="headerlink" title="解题思路1："></a>解题思路1：</h3><hr>
<p>DFS：深度优先遍历（递归实现）<br>参考LeetCode Discuss：<br><a href="https://discuss.leetcode.com/topic/106261/java-c-clean-code" target="_blank" rel="external">https://discuss.leetcode.com/topic/106261/java-c-clean-code</a><br><a href="https://discuss.leetcode.com/topic/13045/my-accepted-c-solution-may-be-trivial" target="_blank" rel="external">https://discuss.leetcode.com/topic/13045/my-accepted-c-solution-may-be-trivial</a></p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt;&amp; grid)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> == grid.size() || <span class="number">0</span> == grid[<span class="number">0</span>].size())</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> numIslands = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.size(); i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].size(); j++) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="string">'1'</span> == grid[i][j]) &#123;</div><div class="line">                    numIslands++;</div><div class="line">                    bfs(grid, i, j);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> numIslands;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt;&amp; grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> &gt; i || i &gt;= grid.size() || <span class="number">0</span> &gt; j || j &gt;= grid[<span class="number">0</span>].size() || <span class="string">'0'</span> == grid[i][j])</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        grid[i][j] = <span class="string">'0'</span>; <span class="comment">// mark the value to avoid duplication</span></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dir(&#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;); <span class="comment">// c++11/14</span></div><div class="line">        <span class="comment">// int nums[] = &#123;-1, 0, 1, 0, -1&#125;;</span></div><div class="line">        <span class="comment">// vector&lt;int&gt; dir(nums, nums + sizeof(nums) / sizeof(int));</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; dir.size() - <span class="number">1</span>; idx++) &#123;</div><div class="line">            <span class="keyword">int</span> rowIdx = i + dir[idx]; <span class="comment">// row index</span></div><div class="line">            <span class="keyword">int</span> colIdx = j + dir[idx + <span class="number">1</span>]; <span class="comment">// col index</span></div><div class="line">            dfs(grid, rowIdx, colIdx);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong></p>
<pre><code>1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素
2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0
3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]
4. 由于是字符数组，在dfs迭代过程中，先要判断是否存在空数组情况，即‘[]’.
</code></pre><h3 id="解题思路2："><a href="#解题思路2：" class="headerlink" title="解题思路2："></a>解题思路2：</h3><hr>
<p>BFS：广度优先遍历（借助队列迭代实现）<br>参考LeetCode Discuss：<br><a href="https://discuss.leetcode.com/topic/11589/dfs-and-bfs-in-c" target="_blank" rel="external">https://discuss.leetcode.com/topic/11589/dfs-and-bfs-in-c</a></p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt;&amp; grid)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> == grid.size() || <span class="number">0</span> == grid[<span class="number">0</span>].size())</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> numIslands = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.size(); i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].size(); j++) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="string">'1'</span> == grid[i][j]) &#123;</div><div class="line">                    numIslands++;</div><div class="line">                    bfs(grid, i, j);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> numIslands;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt;&amp; grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;</div><div class="line">        q.push(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(i, j));</div><div class="line">        grid[i][j] = <span class="string">'0'</span>; <span class="comment">// mark the value to avoid duplication</span></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dir(&#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;); <span class="comment">// c++11/14</span></div><div class="line">        <span class="comment">// int nums[] = &#123;-1, 0, 1, 0, -1&#125;;</span></div><div class="line">        <span class="comment">// vector&lt;int&gt; dir(nums, nums + sizeof(nums) / sizeof(int));</span></div><div class="line">        <span class="keyword">while</span> (<span class="number">0</span> &lt; q.size()) &#123;</div><div class="line">            <span class="keyword">int</span> m = q.front().first; <span class="comment">// row index</span></div><div class="line">            <span class="keyword">int</span> n = q.front().second; <span class="comment">// col index</span></div><div class="line">            q.pop(); <span class="comment">// remove from queue</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; dir.size() - <span class="number">1</span>; idx++) &#123;</div><div class="line">                <span class="keyword">int</span> rowIdx = m + dir[idx];</div><div class="line">                <span class="keyword">int</span> colIdx = n + dir[idx + <span class="number">1</span>];</div><div class="line">                <span class="keyword">if</span> (<span class="number">0</span>&lt;=rowIdx &amp;&amp; rowIdx&lt;grid.size() &amp;&amp; <span class="number">0</span>&lt;=colIdx &amp;&amp; colIdx&lt;grid[<span class="number">0</span>].size()</div><div class="line">                    &amp;&amp; <span class="string">'1'</span>==grid[rowIdx][colIdx]) &#123;</div><div class="line">                    q.push(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(rowIdx, colIdx));</div><div class="line">                    grid[rowIdx][colIdx] = <span class="string">'0'</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong></p>
<pre><code>1. BFS的处理需要借助数组实现，每一次将grid范围内其值为1的元素塞进数组（后续元素为当前grid[i][j]四个方向上的邻接元素）
2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0
3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]
4. 由于是字符数组，在dfs迭代过程中，先要判断是否存在空数组情况，即‘[]’.
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/number-of-islands/description/&quot; 
    
    </summary>
    
      <category term="LeetCode" scheme="http://skyhacks.org/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://skyhacks.org/tags/LeetCode/"/>
    
      <category term="Algorithms" scheme="http://skyhacks.org/tags/Algorithms/"/>
    
      <category term="Data Structure" scheme="http://skyhacks.org/tags/Data-Structure/"/>
    
      <category term="Array" scheme="http://skyhacks.org/tags/Array/"/>
    
      <category term="BFS" scheme="http://skyhacks.org/tags/BFS/"/>
    
      <category term="DFS" scheme="http://skyhacks.org/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 695. Max Area of Island</title>
    <link href="http://skyhacks.org/2017/11/16/LeetCode/LeetCode-MaxAreaofIsland/"/>
    <id>http://skyhacks.org/2017/11/16/LeetCode/LeetCode-MaxAreaofIsland/</id>
    <published>2017-11-16T08:26:13.000Z</published>
    <updated>2017-11-16T17:55:37.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a><a href="https://leetcode.com/problems/max-area-of-island/discuss/" target="_blank" rel="external">题目描述</a>：</h2><p>Given a non-empty 2D array grid of 0’s and 1’s, an island is a group of 1’s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.<br>Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)<br><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[[0,0,1,0,0,0,0,1,0,0,0,0,0],</div><div class="line">[0,0,0,0,0,0,0,1,1,1,0,0,0],</div><div class="line">[0,1,1,0,1,0,0,0,0,0,0,0,0],</div><div class="line">[0,1,0,0,1,1,0,0,1,0,1,0,0],</div><div class="line">[0,1,0,0,1,1,0,0,1,1,1,0,0],</div><div class="line">[0,0,0,0,0,0,0,0,0,0,1,0,0],</div><div class="line">[0,0,0,0,0,0,0,1,1,1,0,0,0],</div><div class="line">[0,0,0,0,0,0,0,1,1,0,0,0,0]]</div></pre></td></tr></table></figure></p>
<p>Given the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.<br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[0,0,0,0,0,0,0,0]]</div></pre></td></tr></table></figure></p>
<p>Given the above grid, return 0.<br><strong>Note:</strong></p>
<pre><code>- The length of each dimension in the given grid does not exceed 50.
</code></pre><h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>给定二维格子grid，上下左右相邻的1组成岛屿，求岛屿的最大面积。</p>
<h3 id="解题思路1："><a href="#解题思路1：" class="headerlink" title="解题思路1："></a>解题思路1：</h3><hr>
<p>DFS：深度优先遍历（递归实现）<br>参考LeetCode Discuss：<br><a href="https://discuss.leetcode.com/topic/106301/java-c-straightforward-dfs-solution" target="_blank" rel="external">https://discuss.leetcode.com/topic/106301/java-c-straightforward-dfs-solution</a><br><a href="https://discuss.leetcode.com/topic/106261/java-c-clean-code" target="_blank" rel="external">https://discuss.leetcode.com/topic/106261/java-c-clean-code</a></p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxAreaOfIsland</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> m = grid.size();</div><div class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].size();</div><div class="line">        <span class="keyword">int</span> maxArea = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="number">1</span> == grid[i][j]) &#123;</div><div class="line">                    maxArea = max(maxArea, dfs(grid, i, j));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> maxArea;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp; grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> &gt; i || i &gt;= grid.size() || <span class="number">0</span> &gt; j || j &gt;= grid[<span class="number">0</span>].size() || <span class="number">0</span> == grid[i][j])</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">        grid[i][j] = <span class="number">0</span>; <span class="comment">// mark the value to avoid duplication</span></div><div class="line">        <span class="keyword">return</span> <span class="number">1</span> + dfs(grid, i - <span class="number">1</span>, j) + dfs(grid, i + <span class="number">1</span>, j)</div><div class="line">        + dfs(grid, i, j - <span class="number">1</span>) + dfs(grid, i, j + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong></p>
<pre><code>1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素
2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0
3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]
</code></pre><h3 id="解题思路2："><a href="#解题思路2：" class="headerlink" title="解题思路2："></a>解题思路2：</h3><hr>
<p>BFS：广度优先遍历（借助队列迭代实现）<br>参考LeetCode Discuss：<a href="https://discuss.leetcode.com/topic/106274/c-bfs-dfs-concise-code" target="_blank" rel="external">https://discuss.leetcode.com/topic/106274/c-bfs-dfs-concise-code</a></p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxAreaOfIsland</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> m = grid.size();</div><div class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].size();</div><div class="line">        <span class="keyword">int</span> maxArea = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="number">1</span> == grid[i][j]) &#123;</div><div class="line">                    maxArea = max(maxArea, bfs(grid, i, j));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> maxArea;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</div><div class="line">        q.push(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(i, j));</div><div class="line">        <span class="keyword">int</span> maxArea = <span class="number">1</span>;</div><div class="line">        grid[i][j] = <span class="number">0</span>; <span class="comment">// mark the value to avoid duplication</span></div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dir(&#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;);</div><div class="line">        <span class="keyword">while</span> (<span class="number">0</span> &lt; q.size()) &#123;</div><div class="line">            <span class="keyword">int</span> m = q.front().first; <span class="comment">// row index</span></div><div class="line">            <span class="keyword">int</span> n = q.front().second; <span class="comment">// col index</span></div><div class="line">            q.pop(); <span class="comment">// remove from queue</span></div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; dir.size() - <span class="number">1</span>; idx++) &#123;</div><div class="line">                <span class="keyword">int</span> rowIdx = m + dir[idx];</div><div class="line">                <span class="keyword">int</span> colIdx = n + dir[idx + <span class="number">1</span>];</div><div class="line">                <span class="keyword">if</span> (<span class="number">0</span>&lt;=rowIdx &amp;&amp; rowIdx&lt;grid.size() &amp;&amp; <span class="number">0</span>&lt;=colIdx &amp;&amp; colIdx&lt;grid[<span class="number">0</span>].size()</div><div class="line">                    &amp;&amp; <span class="number">1</span>==grid[rowIdx][colIdx]) &#123;</div><div class="line">                    q.push(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(rowIdx, colIdx));</div><div class="line">                    maxArea++;</div><div class="line">                    grid[rowIdx][colIdx] = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> maxArea;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong></p>
<pre><code>1. BFS的处理需要借助数组实现，每一次将grid范围内其值为1的元素塞进数组（后续元素为当前grid[i][j]四个方向上的邻接元素）
2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0
3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/max-area-of-island/discuss/&quot; tar
    
    </summary>
    
      <category term="LeetCode" scheme="http://skyhacks.org/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://skyhacks.org/tags/LeetCode/"/>
    
      <category term="Algorithms" scheme="http://skyhacks.org/tags/Algorithms/"/>
    
      <category term="Data Structure" scheme="http://skyhacks.org/tags/Data-Structure/"/>
    
      <category term="Array" scheme="http://skyhacks.org/tags/Array/"/>
    
      <category term="BFS" scheme="http://skyhacks.org/tags/BFS/"/>
    
      <category term="DFS" scheme="http://skyhacks.org/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 697. Degree of an Array</title>
    <link href="http://skyhacks.org/2017/11/15/LeetCode/LeetCode-DegreeofanArray/"/>
    <id>http://skyhacks.org/2017/11/15/LeetCode/LeetCode-DegreeofanArray/</id>
    <published>2017-11-15T08:10:07.000Z</published>
    <updated>2017-11-16T17:55:37.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a><a href="https://leetcode.com/problems/degree-of-an-array/description/" target="_blank" rel="external">题目描述</a>：</h2><p>Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.<br>Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.<br><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Input: [1, 2, 2, 3, 1]</div><div class="line">Output: 2</div><div class="line">Explanation:</div><div class="line">    The input array has a degree of 2 because both elements 1 and 2 appear twice.</div><div class="line">    Of the subarrays that have the same degree:</div><div class="line">    [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]</div><div class="line">    The shortest length is 2. So return 2.</div></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: [1,2,2,3,1,4,2]</div><div class="line">Output: 6</div></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<pre><code>- nums.length will be between 1 and 50,000.
- nums[i] will be an integer between 0 and 49,999.
</code></pre><h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>给定非空非负整数数组，数组的度是指元素的最大出现次数。<br>寻找最大连续区间，使得区间的度与原数组的度相同。</p>
<h3 id="解题思路1："><a href="#解题思路1：" class="headerlink" title="解题思路1："></a>解题思路1：</h3><hr>
<p>数组mapCnt记录元素的出现个数<br>数组mapMax记录元素的最大degree<br>startIdx和endIdx记录元素的最小和最大下标（length = endIdx - startIdx + 1）<br>遍历即可<br>参考LeetCode Discuss：<a href="https://discuss.leetcode.com/topic/107102/my-accepted-c-solution-o-n/3" target="_blank" rel="external">https://discuss.leetcode.com/topic/107102/my-accepted-c-solution-o-n/3</a></p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findShortestSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mapCnt;</div><div class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> min = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="literal">true</span> == doFineSubArray(nums, mapCnt)) &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator it;</div><div class="line">        <span class="keyword">for</span> (it = mapCnt.begin(); it != mapCnt.end(); ++it) &#123;</div><div class="line">            <span class="keyword">if</span> (it-&gt;second &gt; max) max = it-&gt;second;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mapMax;</div><div class="line">        <span class="keyword">for</span> (it = mapCnt.begin(); it != mapCnt.end(); ++it) &#123;</div><div class="line">            <span class="keyword">if</span> (it-&gt;second == max) mapMax.insert(pair&lt;<span class="keyword">int</span> , <span class="keyword">int</span>&gt;(it-&gt;first, it-&gt;second));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        max = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (it = mapMax.begin(); it != mapMax.end(); ++it) &#123;</div><div class="line">            <span class="keyword">int</span> beginIdx = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; nums.size(); idx++) &#123;</div><div class="line">                <span class="keyword">if</span> (nums[idx] == it-&gt;first) &#123;</div><div class="line">                    beginIdx = idx;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> endIdx = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> idx = nums.size() - <span class="number">1</span>; <span class="number">0</span> &lt;= idx; idx--) &#123;</div><div class="line">                <span class="keyword">if</span> (nums[idx] == it-&gt;first) &#123;</div><div class="line">                    endIdx = idx;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> length = endIdx - beginIdx + <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (<span class="number">0</span> == min) min = length;</div><div class="line">            <span class="keyword">else</span> min = (min &lt; length) ? min : length;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> min;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">doFineSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; mapCnt)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; nums.size(); idx++) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> != mapCnt.count(nums[idx])) ++mapCnt[nums[idx]];</div><div class="line">        <span class="keyword">else</span> mapCnt.insert(pair&lt;<span class="keyword">int</span> , <span class="keyword">int</span>&gt;(nums[idx], <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> &lt; mapCnt.size()) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong></p>
<pre><code>1. 这中解法如果出现nums={1, 2, 3}时候，最后的循环遍历时间复杂度会变成0(n^2)
2. std::map的本质是红黑树，查找的时间复杂度是O(nlogn).
3. C++中的hashtable，可以考虑unordered_map（C++11/14）.
</code></pre><h3 id="解题思路2："><a href="#解题思路2：" class="headerlink" title="解题思路2："></a>解题思路2：</h3><hr>
<p>数组unordered_map<int,vector<int>&gt; mapCnt用来记录数值和在数组nums中出现的下标<br>max找到最大的degree<br>min找到最短的subarray的length<br>遍历即可<br>参考LeetCode Discuss：<a href="https://discuss.leetcode.com/topic/107162/straightforward-c-solution-35ms" target="_blank" rel="external">https://discuss.leetcode.com/topic/107162/straightforward-c-solution-35ms</a></int,vector<int></p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findShortestSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; mapCnt;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; nums.size(); idx++) mapCnt[nums[idx]].push_back(idx);</div><div class="line">    <span class="keyword">int</span> degree = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = mapCnt.begin(); it != mapCnt.end(); it++)</div><div class="line">        degree = max(degree, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(it-&gt;second.size()));</div><div class="line">    <span class="keyword">int</span> shortest = nums.size();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = mapCnt.begin(); it != mapCnt.end(); ++it) &#123;</div><div class="line">        <span class="keyword">if</span> (degree == it-&gt;second.size()) &#123;</div><div class="line">            shortest = min(shortest, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(it-&gt;second.back() - it-&gt;second[<span class="number">0</span>] + <span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> shortest;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong></p>
<pre><code>1. 这中解法如果出现nums={1, 2, 3}时候，最后的循环遍历时间复杂度会变成0(n^2)
2. unordered_map（C++11/14）本质是hashtable，可以实现访问时间O(1)的时间复杂度.
3. 第二个元素vector&lt;int&gt;用来存储元素出现的下标，同时该数组长度也是元素出现的个数，节省了上一个
    算法的计数步骤，关键是，最后计算subarray的length的时候，收尾元素的差值+1就是shortest，灰常好使。
</code></pre><h3 id="解题思路3："><a href="#解题思路3：" class="headerlink" title="解题思路3："></a>解题思路3：</h3><hr>
<p>使用两个数组unordered_map<int,int><br>    数组startIndex用来记录每个元素在nums中的起始index<br>    数组count用来记录每个元素在nums中出现的degree<br>遍历即可，更新最大的frequency在遍历时，如果多个元素有相同的frequency，比较他们的长度，选择subarray的length最短那个<br>参考LeetCode Discuss：<a href="https://discuss.leetcode.com/topic/107216/concise-c-solution-using-hash-map-o-n-time" target="_blank" rel="external">https://discuss.leetcode.com/topic/107216/concise-c-solution-using-hash-map-o-n-time</a></int,int></p>
<p><strong>C++代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findShortestSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; mp;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++) mp[nums[i]].push_back(i);</div><div class="line">    <span class="keyword">int</span> degree=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it=mp.begin();it!=mp.end();it++) degree=max(degree,<span class="keyword">int</span>(it-&gt;second.size()));</div><div class="line">    <span class="keyword">int</span> shortest=nums.size();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it=mp.begin();it!=mp.end();it++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(it-&gt;second.size()==degree)</div><div class="line">        &#123;</div><div class="line">            shortest=min(shortest,it-&gt;second.back()-it-&gt;second[<span class="number">0</span>]+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> shortest;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>代码分析：</strong></p>
<pre><code>1. 一个循环中用来记录元素的起始位置，并且更新元素的degree，同时计算出当前的最小len
2. 如果两个元素拥有相同的degree，比较并取length最小的那个
3. 遍历nums中每个元素的同时，如果元素的出现次数frequency大于当前fre，更新len和fre
4. len的长度改变只有两个时候：两个元素的degree相同和元素的出现次数frequ&gt;当前fre时候
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/degree-of-an-array/description/&quot;
    
    </summary>
    
      <category term="LeetCode" scheme="http://skyhacks.org/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://skyhacks.org/tags/LeetCode/"/>
    
      <category term="Algorithms" scheme="http://skyhacks.org/tags/Algorithms/"/>
    
      <category term="Data Structure" scheme="http://skyhacks.org/tags/Data-Structure/"/>
    
      <category term="Array" scheme="http://skyhacks.org/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>给Hexo添加Gitment评论插件</title>
    <link href="http://skyhacks.org/2017/08/04/Others/AddGitmentToNext/"/>
    <id>http://skyhacks.org/2017/08/04/Others/AddGitmentToNext/</id>
    <published>2017-08-04T09:32:52.000Z</published>
    <updated>2017-11-16T17:55:37.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>今年六一略显不同，多说正式关闭服务, 蓝后，7月6号网易云跟帖也关了。在这个多事之秋。国内的评论系统纷纷倒闭。<br><img src="http://otqlqfy9h.bkt.clouddn.com/images/2017-08-04/2017_08_04_1.png"><br>一直想给博客加个靠谱的评论系统，只能求助于谷歌，搜索一番之后，不经意间看到了，imsun实现的一款基于 GitHub Issues 的评论系统Gitment。<br><code>Gitment</code>是作者imsun实现的一款基于<code>GitHub Issues</code>的评论系统。 支持在前端直接引入, 不需要任何后端代码。 可以在页面进行登录、查看、评论、点赞等操作。同时有完整的 <code>Markdown / GFM</code> 和代码高亮支持，尤为适合各种基于 <code>GitHub Pages</code> 的静态博客或项目页面。<br>本篇文章仅介绍在<code>hexo-NexT</code>中添加<code>Gitment</code>评论插件, 并且增加一个点开显示评论的按钮, 对于 Gitment 的使用请参考<a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="external">imsun的博客</a>。</p>
<h2 id="一、注册github-OAuth-Application"><a href="#一、注册github-OAuth-Application" class="headerlink" title="一、注册github OAuth Application"></a>一、注册github OAuth Application</h2><hr>
<p>Gitment是使用的GitHub Issues作为评论系统，在接入Gitment前，需要获得GitHub的授权，获得相应的客户端id和客户端私钥，以备站点使用。具体步骤如下图所示：<br><a href="https://github.com/settings/applications/new" target="_blank" rel="external">OAuth application注册接入</a>： 在github主页头像-&gt;setting下面，填入相关信息如下<br><img src="http://otqlqfy9h.bkt.clouddn.com/images/2017-08-04/2017_08_04_2.png"><br>注册完毕，得到owner、client_id、client_secret。<br><img src="http://otqlqfy9h.bkt.clouddn.com/images/2017-08-04/2017_08_04_3.png"></p>
<h2 id="二、添加-Gitment-插件"><a href="#二、添加-Gitment-插件" class="headerlink" title="二、添加 Gitment 插件"></a>二、添加 Gitment 插件</h2><hr>
<p>打开<code>/next/layout/_partials/comments.swig</code>文件, 在最后一个 elseif 代码块下面添加<code>Gitment</code>相关的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&#123;% elseif theme.changyan.appid and theme.changyan.appkey %&#125;</div><div class="line">   &lt;div id=&quot;SOHUCS&quot;&gt;&lt;/div&gt;</div><div class="line">&#123;% elseif theme.gitment.enable %&#125;</div><div class="line">    &lt;div onclick=&quot;showGitment()&quot; id=&quot;gitment_title&quot; class=&quot;gitment_title&quot;&gt;显示 Gitment 评论&lt;/div&gt;</div><div class="line">    &lt;div id=&quot;container&quot; style=&quot;display:none&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://imsun.github.io/gitment/style/default.css&quot;&gt;</div><div class="line">    &lt;script src=&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">    const myTheme = &#123;</div><div class="line">      render(state, instance) &#123;</div><div class="line">        const container = document.createElement(&apos;div&apos;);</div><div class="line">        container.lang = &quot;en-US&quot;;</div><div class="line">        container.className = &apos;gitment-container gitment-root-container&apos;;</div><div class="line">        container.appendChild(instance.renderHeader(state, instance));</div><div class="line">        container.appendChild(instance.renderEditor(state, instance));</div><div class="line">        container.appendChild(instance.renderComments(state, instance));</div><div class="line">        container.appendChild(instance.renderFooter(state, instance));</div><div class="line">        return container;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    function showGitment() &#123;</div><div class="line">      $(&quot;#gitment_title&quot;).attr(&quot;style&quot;, &quot;display:none&quot;);</div><div class="line">      $(&quot;#container&quot;).attr(&quot;style&quot;, &quot;&quot;).addClass(&quot;gitment_container&quot;);</div><div class="line">      var gitment = new Gitment(&#123;</div><div class="line">        id: window.location.pathname,</div><div class="line">        theme: myTheme,</div><div class="line">        owner: &apos;&#123;&#123; theme.gitment.owner &#125;&#125;&apos;,</div><div class="line">        repo: &apos;&#123;&#123; theme.gitment.repo &#125;&#125;&apos;,</div><div class="line">        oauth: &#123;</div><div class="line">          client_id: &apos;&#123;&#123; theme.gitment.client_id &#125;&#125;&apos;,</div><div class="line">          client_secret: &apos;&#123;&#123; theme.gitment.client_secret &#125;&#125;&apos;</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">      gitment.render(&apos;container&apos;);</div><div class="line">    &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>
<p>然后打开<code>NexT</code>主题的<code>_config.yml</code>文件, 在评论区域添加以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># Gitment comments</div><div class="line">gitment:</div><div class="line">  enable: true</div><div class="line">  owner: xxxx #your github ID</div><div class="line">  repo: xxxx #the name of repo to store comments()</div><div class="line">  client_id: xxxx #your client ID</div><div class="line">  client_secret: xxxx #your client</div></pre></td></tr></table></figure></p>
<p>我的配置信息如下：<br><img src="http://otqlqfy9h.bkt.clouddn.com/images/2017-08-04/2017_08_04_4.png"></p>
<h2 id="三、“显示-Gitment-评论”-的按钮样式"><a href="#三、“显示-Gitment-评论”-的按钮样式" class="headerlink" title="三、“显示 Gitment 评论” 的按钮样式"></a>三、“显示 Gitment 评论” 的按钮样式</h2><hr>
<p>在 next/source/css/_common/components 目录中新建一个 gitment.styl 的 css 样式文件, 复制以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">.gitment_title:hover &#123;</div><div class="line">    color: #fff;</div><div class="line">    background: #0a9caf;</div><div class="line">    background-image: initial;</div><div class="line">    background-position-x: initial;</div><div class="line">    background-position-y: initial;</div><div class="line">    background-size: initial;</div><div class="line">    background-repeat-x: initial;</div><div class="line">    background-repeat-y: initial;</div><div class="line">    background-attachment: initial;</div><div class="line">    background-origin: initial;</div><div class="line">    background-clip: initial;</div><div class="line">    background-color: rgb(10, 156, 175);</div><div class="line">&#125;</div><div class="line">.gitment_title &#123;</div><div class="line">    border: 1px solid #0a9caf;</div><div class="line">    border-top-color: rgb(10, 156, 175);</div><div class="line">    border-top-style: solid;</div><div class="line">    border-top-width: 1px;</div><div class="line">    border-right-color: rgb(10, 156, 175);</div><div class="line">    border-right-style: solid;</div><div class="line">    border-right-width: 1px;</div><div class="line">    border-bottom-color: rgb(10, 156, 175);</div><div class="line">    border-bottom-style: solid;</div><div class="line">    border-bottom-width: 1px;</div><div class="line">    border-left-color: rgb(10, 156, 175);</div><div class="line">    border-left-style: solid;</div><div class="line">    border-left-width: 1px;</div><div class="line">    border-image-source: initial;</div><div class="line">    border-image-slice: initial;</div><div class="line">    border-image-width: initial;</div><div class="line">    border-image-outset: initial;</div><div class="line">    border-image-repeat: initial;</div><div class="line">    border-radius: 4px;</div><div class="line">    border-top-left-radius: 4px;</div><div class="line">    border-top-right-radius: 4px;</div><div class="line">    border-bottom-right-radius: 4px;</div><div class="line">    border-bottom-left-radius: 4px;</div><div class="line">&#125;</div><div class="line">.gitment_title &#123;</div><div class="line">    display: inline-block;</div><div class="line">    padding: 0 15px;</div><div class="line">    padding-top: 0px;</div><div class="line">    padding-right: 15px;</div><div class="line">    padding-bottom: 0px;</div><div class="line">    padding-left: 15px;</div><div class="line">    color: #0a9caf;</div><div class="line">    cursor: pointer;</div><div class="line">    font-size: 14px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后打开同目录中的 components.styl 文件, 找个顺眼的位置添加一句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@import &quot;gitment&quot;;</div></pre></td></tr></table></figure></p>
<h2 id="四、为每篇博文初始化评论系统"><a href="#四、为每篇博文初始化评论系统" class="headerlink" title="四、为每篇博文初始化评论系统"></a>四、为每篇博文初始化评论系统</h2><hr>
<p>由于gitment的原理是为每一遍博文以其URL作为标识创建一个<code>github issue</code>，对该篇博客的评论就是对这个issue的评论。因此，我们需要为每篇博文初始化一下评论系统， 初始化后，你可以在你的github上会创建相对应的issue。<br>前面的步骤完成，重新部署网站后，你就可以在你的博文页下面看到一个评论框，还有看到以下错误<code>Error: Comments Not Initialized</code>，提示该篇博文的评论系统还没初始化。</p>
<ul>
<li>点击<strong>Login with GitHub</strong>后，使用自己的github账号登录后， 就可以在上面错误信息处看到一个<strong>Initialize Comments</strong>的按钮。<br>  (注意: 由于要求回调URL和当前地址一样，故第2步不能在本地调试， 需把代码先上传部署到服务器以后再调试，即<code>hexo s</code>是看不到效果的，只有<code>hexo g &amp;&amp; hexo d</code>才行)。</li>
<li>点击<strong>Initialize Comments</strong>按钮后，就可以开始对该篇博文开始评论了， 同时也可以在对应的github仓库看到相应的issue。  <img src="http://otqlqfy9h.bkt.clouddn.com/images/2017-08-04/2017_08_04_5.png">
</li>
</ul>
<h2 id="五、安装中遇到问题"><a href="#五、安装中遇到问题" class="headerlink" title="五、安装中遇到问题"></a>五、安装中遇到问题</h2><hr>
<ul>
<li>获取对应数据ID<br>  在配置owner的时候，可以在浏览器中输入：<code>https://api.github.com/users/GitHub用户名</code>，来获取对应数据id。</li>
<li>配置主题文件_config.yml时，格式错误，比如gitment前有空格也会造成代码生成问题。</li>
<li><code>Error: Not Found</code>问题，repo库填写问题，详见<a href="https://github.com/imsun/gitment/issues/18" target="_blank" rel="external">gitment issues 18</a>。<br>  Not Found问题，基本上是因为<code>NexT</code>主题的<code>_config.yml</code>文件里，配置信息不对。一般是Github ID填错，或者repo填错(git评论仓库的名称，不是git仓库地址)。</li>
<li>其他问题，参见<a href="https://github.com/imsun/gitment/issues" target="_blank" rel="external">作者项目的Issue</a>。</li>
</ul>
<h2 id="四、后记"><a href="#四、后记" class="headerlink" title="四、后记"></a>四、后记</h2><hr>
<p>以下是自己搭建过程中查找的相关链接和信息，希望对大家有帮助。</p>
<ol>
<li><a href="https://github.com/imsun/gitment" target="_blank" rel="external">https://github.com/imsun/gitment</a></li>
<li><a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="external">https://imsun.net/posts/gitment-introduction/</a></li>
<li><a href="https://meesong.github.io/StaticBlog/2017/NexT+Gitment/" target="_blank" rel="external">https://meesong.github.io/StaticBlog/2017/NexT+Gitment/</a></li>
<li><a href="https://zonghongyan.github.io/2017/06/29/201706292034/" target="_blank" rel="external">https://zonghongyan.github.io/2017/06/29/201706292034/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;今年六一略显不同，多说正式关闭服务, 蓝后，7月6号网易云跟帖也关了。在这个多事之秋。国内的评论系统纷纷倒闭。&lt;br&gt;&lt;img s
    
    </summary>
    
      <category term="Others" scheme="http://skyhacks.org/categories/Others/"/>
    
    
      <category term="Hexo" scheme="http://skyhacks.org/tags/Hexo/"/>
    
      <category term="Next" scheme="http://skyhacks.org/tags/Next/"/>
    
      <category term="Gitment" scheme="http://skyhacks.org/tags/Gitment/"/>
    
  </entry>
  
  <entry>
    <title>使用七牛为Hexo存储图片</title>
    <link href="http://skyhacks.org/2017/08/02/Others/UseQiniudnToStorePic/"/>
    <id>http://skyhacks.org/2017/08/02/Others/UseQiniudnToStorePic/</id>
    <published>2017-08-02T09:53:29.000Z</published>
    <updated>2017-11-16T17:55:37.148Z</updated>
    
    <content type="html"><![CDATA[<p>搭建完博客之后一直使用本地图片（相对路径），这样不是很方便，毕竟事关逼格。网上搜索了一把，貌似七牛云做图床评价挺高。说干就干，咱也尝试着使用七牛作为博客的图床了。</p>
<h2 id="一、七牛是什么"><a href="#一、七牛是什么" class="headerlink" title="一、七牛是什么"></a>一、七牛是什么</h2><hr>
<p><a href="https://www.qiniu.com/" target="_blank" rel="external">七牛</a> 是一个云存储服务商，注册并实名认证之后，你将免费享有 10GB 存储空间，每月 10GB 下载流量、100 万次 GET 请求、 10 万次 <code>PUT/DELETE</code> 请求。这对于一个博客来说，完全足够了。<br><img src="http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_1.png"></p>
<h2 id="二、为什么选用七牛"><a href="#二、为什么选用七牛" class="headerlink" title="二、为什么选用七牛"></a>二、为什么选用七牛</h2><hr>
<p><strong>与直接部署到站点相比：</strong></p>
<ul>
<li>访问速度更快 （特别是对比部署到github的情况）。</li>
<li>对个人用户而言空间和流量都十分阔绰。 Gitcafe有 512Mb 的总空间限制，Github虽没有找到类似的说明，但是在其上托管过多媒体资源也不是太合适的做法。而在七牛，你甚至可以通过邀请好友来增加每月下载流量（我的<a href="https://portal.qiniu.com/signup?code=3lg4nzgggsggi" target="_blank" rel="external">邀请链接</a>），每成功邀请一名朋友将增加5GB的下载流量，最高上限可达40GB。</li>
<li>如果你爱折腾，还可以玩出更多花样3：</li>
<li>防盗链；<br>  对图片、音视频等在线处理，不必自己做重复工作。通过调用接口，七牛可以帮你：加水印、自定义裁剪区域、旋转、调整图片质量、转换格式；<br>  分析下载量等详细数据，挖掘用户行为。</li>
</ul>
<p><strong>与其他上传站点相比：</strong></p>
<ul>
<li>更稳定：七牛毕竟是老牌服务商，数据的安全性和稳定性都较有保证。如果上传到什么小网站，哪天发现图片都打不开了才是人间惨剧~</li>
<li>更灵活：配合 hexo-qiniu-sync 插件4，就算是七牛以后更改了空间域名，也不用一篇一篇地去改外链地址，只要在配置文件中修改外链前缀即可。</li>
<li>更方便：配合 hexo-qiniu-sync 插件，不必”上传→复制链接→引用外链“，直接按照本地路径引用，然后键入一条命令同步到七牛就好。会自动识别哪些是新增、修改的文件需要上传，哪些是原有的文件不需改动，十分方便。</li>
</ul>
<p><strong>当然，虽然七牛有很多优点，但是有一些不足：</strong></p>
<ul>
<li>在线文件管理不支持目录。</li>
<li>本地删除文件，云端不能同步删除文件。<br>尽管仍有欠缺，私以为七牛依旧是现在个人博客最佳的资源储存服务。</li>
</ul>
<h2 id="三、七牛存储空间的设置"><a href="#三、七牛存储空间的设置" class="headerlink" title="三、七牛存储空间的设置"></a>三、七牛存储空间的设置</h2><hr>
<ol>
<li><a href="https://portal.qiniu.com/create" target="_blank" rel="external">申请七牛账号</a></li>
<li>选择<strong>对象存储</strong>创建存储空间 <img src="http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_2.png">
 配置相关参数 <img src="http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_3.png"></li>
<li>点击页面右上角头像→进入”个人中心“→选择”密钥管理“→复制当前使用中的<code>AK</code>和<code>SK</code>(待会设置插件时会用到)。 <img src="http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_4.png">
</li>
</ol>
<h2 id="四、设置-hexo-qiniu-sync-插件"><a href="#四、设置-hexo-qiniu-sync-插件" class="headerlink" title="四、设置 hexo-qiniu-sync 插件"></a>四、设置 hexo-qiniu-sync 插件</h2><hr>
<p>前人栽树，后人乘凉。有了插件<a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="external"><strong>hexo-qiniu-sync</strong></a>，可以不用手动上传文件到七牛，插件会自动帮你将本地目录的文件同步到七牛之前设定的存储空间下。</p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>在hexo主目录下运行以下命令进行安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-qiniu-sync --save</div></pre></td></tr></table></figure></p>
<h3 id="添加插件配置信息"><a href="#添加插件配置信息" class="headerlink" title="添加插件配置信息"></a>添加插件配置信息</h3><p>在hexo主目录下找到配置文件 <code>_config.yml</code>, 加入以下配置信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#七牛云存储设置</div><div class="line">qiniu:</div><div class="line">  offline: false</div><div class="line">  sync: true</div><div class="line">  bucket: bucket_name</div><div class="line">  secret_file: sec/qn.json or C:</div><div class="line">  access_key: AccessKey</div><div class="line">  secret_key: SecretKey</div><div class="line">  dirPrefix: static</div><div class="line">  urlPrefix: http://bucket_name.qiniudn.com/static</div><div class="line">  up_host: http://upload.qiniu.com</div><div class="line">  local_dir: static</div><div class="line">  update_exist: true</div><div class="line">  image: </div><div class="line">    folder: images</div><div class="line">    extend: </div><div class="line">  js:</div><div class="line">    folder: js</div><div class="line">  css:</div><div class="line">    folder: css</div><div class="line">  audio:</div><div class="line">    folder: audio</div></pre></td></tr></table></figure></p>
<p><strong>几个注意点:</strong></p>
<ul>
<li><strong>bucket</strong> ：修改为你刚才申请的七牛空间名称</li>
<li><strong>access_key 、 secret_key</strong> : 上传密钥<code>AccessKey、SecretKey</code>。即3 第3步复制的AK和SK。</li>
<li><strong>urlPrefix</strong> : 七牛空间地址的前缀。 <strong>重要！必填！</strong><br>因为现在七牛已经取消了二级域名，外链前缀类似设置中的 <a href="http://7xqb0u.com1.z0.glb.clouddn.com" target="_blank" rel="external">http://7xqb0u.com1.z0.glb.clouddn.com</a> ，插件不能根据 bucket 自动生成外链前缀了。你可以进入自己创建的空间在域名设置中看到自己的七牛测试域名，也可以查看一个已上传的文件外链地址，确认前缀无误。这个参数的设置是保证解析成网页文件时，外链地址正确的关键之一！  <img src="http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_5.png"></li>
<li>不要在plugins下面添加hexo-qiniu-sync的配置项，否则会导致错误，<a href="https://github.com/gyk001/hexo-qiniu-sync/issues/41#issuecomment-279229378" target="_blank" rel="external">详见</a> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 错误示例</div><div class="line">plugins:</div><div class="line">  - hexo-qiniu-sync</div></pre></td></tr></table></figure>
</li>
</ul>
<p>配置参数说明：</p>
<ul>
<li><strong>offline 参数：</strong><br>如果要使用同步到七牛空间的静态资源，请设置为 false。如果只想浏览在本地的静态资源文件，则设置为 true。</li>
<li><strong>secret_file 参数： </strong><br>可有可无，貌似有了这个之后上面的两个参数就不需要配置了。这个路径是需要你自己建立一个json的文件存储上面的秘钥，然后把文件的路径写在这里就好</li>
<li><strong>sync 参数：</strong><br>如果你想关掉七牛同步，将此参数设置为false即可，不过一般用不到修改这个参数。</li>
<li><strong>dirPrefix 参数：</strong><br>将资源上传到七牛空间内这个目录下(说是目录会容易理解点)，默认为 <code>static</code> 目录。<br>可设置为空。该参数会影响外链的地址，如果设置为非空值，例如默认值 <code>static</code> ，则 <code>urlPrefix</code> 为保持一致需加上目录后缀 <code>/static</code> ，改为 <code>http://bucket_name.qiniudn.com/static</code> 。<br>(外链地址<a href="http://bucket_name.qiniudn.com，替换成自己地址" target="_blank" rel="external">http://bucket_name.qiniudn.com，替换成自己地址</a>)</li>
<li><strong>urlPrefix 参数：</strong><br>七牛空间地址的前缀，会按默认格式自动生成地址，所以此参数可省略。<br>默认格式为 <code>http://bucket_name.qiniudn.com/static</code> ，如果你的七牛空间使用自定义域名或域名不是此格式的，请配置此参数。<br>当你设置了 <code>dirPrefix</code> 参数后，如<code>static</code>。则此<code>url</code>地址必须加上目录后缀 <code>/static</code> ， 即<code>http://bucket_name.qiniudn.com/static</code>，否则静态资源将无法访问。<br>如果没有设置 <code>dirPrefix</code> 参数，url地址不必加上目录后缀， 即<code>http://bucket_name.qiniudn.com</code>。<br>(外链地址<a href="http://bucket_name.qiniudn.com，替换成自己地址" target="_blank" rel="external">http://bucket_name.qiniudn.com，替换成自己地址</a>)</li>
<li><strong>local_dir 参数：</strong><br>只填写一个目录名称即可，建立在hexo博客的主目录，不需要使用子目录。<br>当你在配置中填写好文件夹后，运行hexo时，会自动建立对应的目录。<br>如果你了解hexo文件夹的关系，担心这样会导致离线模式不能查看到图片，我可以告诉你你不需要担心这个问题。<br>在你以离线模式运行时，会自动使用软连接/联接方式帮你建立文件夹的引用，可以让你的离线浏览节省一倍的空间。</li>
<li><strong>update_exist 参数：</strong><br>如果你的静态文件会进行修改或替换，并需要更新七牛空间上原先上传的文件，则设置为 true 。<br>是否更新空间上已上传的文件，是按照对比文件大小是否相同或者本地文件在上传到七牛空间之后进行过修改的规则进行判断的。</li>
<li><strong>image/js/css ：</strong><br>子参数folder为不同静态资源种类的目录名称，一般不需要改动</li>
<li><strong>image : extend 参数：</strong><br>这是个特殊参数，是文章内使用 qnimg 标签引用图片的默认图片处理操作。请参考 七牛开发者中心-图片处理。<br>可以使用 基本图片处理（imageView2）、高级图片处理（imageMogr2）、图片水印处理（watermark） 这三个图片处理接口，多个接口内容之间用 | 间隔。<br>例如 <code>?imageView2/2/w/500</code> 即生成宽度最多500px的缩略图。</li>
</ul>
<p>以下是我的配置文件<br><img src="http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_6.png"></p>
<p>这样你在 <code>local_dir</code> 的<code>image命名</code>的文件夹中添加一张图片，之后运行<code>hexo（如hexo s）</code>，图片就可以在你的七牛存储空间的内容管理中看见了。<br>你会看到图片的外链URL就是<code>http://your_site/your_static(你的目录-dirPrefix参数的配置)/images/yourimage.png</code>。就是<code>域名+自定义的目录名+images（配置文件中image中folder指定的文件）+ 图片名</code><br><img src="http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_7.png"></p>
<h2 id="五、引用七牛资源"><a href="#五、引用七牛资源" class="headerlink" title="五、引用七牛资源"></a>五、引用七牛资源</h2><hr>
<h3 id="引用图片"><a href="#引用图片" class="headerlink" title="引用图片"></a>引用图片</h3><p>图片的引用是最典型的情况。让我们来看最简单的情况：如果你想引用储存在 <code>local_dir/images</code> 下的图片 <code>demo.jpg</code> ，只需在文章中插入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% qnimg demo.jpg %&#125;</div></pre></td></tr></table></figure></p>
<p>生成站点时将被解析为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;http://7xqb0u.com1.z0.glb.clouddn.com/images/demo.jpg&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>这里，我们总结一下生成的图片外链地址规则。我们把引用实例概括为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% qnimg ImgFile %&#125;</div></pre></td></tr></table></figure></p>
<p>则生成的图片外链地址规则为<code>urlPrefix + / + image.folder + / + ImgFile</code>。<br>因此，要想正确的引用外链，一定要注意每一个步骤的设置。如果最后外链不能正常显示，首先对比一下网站博客引用的地址和七牛的外链地址是否一致，如果不一致，则对照外链地址的生成规律，检查文件存放路径、 urlPrefix 、 dirPrefix 、 image.folder 设置是否正确。</p>
<h3 id="图片引用的高阶版"><a href="#图片引用的高阶版" class="headerlink" title="图片引用的高阶版"></a>图片引用的高阶版</h3><p>高级用法的通用模版：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% qnimg imageFile [attr1:value1] [&apos;attr2:value21 value22 ...&apos;] [extend:... | normal:yes] %&#125;</div></pre></td></tr></table></figure></p>
<p>[] 表示可选项，按需添加，也可以不写<br>| 表示二选一<br>extend:… 图片处理参数，表示对图片进行某种特定处理5，多个处理之间用 | 间隔。<br>normal:yes 表示使用原图，忽略 _config.yml 文件中的 image.extend 设置<br>实例 图片的本地路径为 cdn/images/test/demo.png ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% qnimg test/demo.png title:标题 alt:说明 &apos;class:class1 class2&apos; extend:?imageView2/2/w/600 %&#125;</div></pre></td></tr></table></figure></p>
<p>解析为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img title=&quot;标题&quot; alt=&quot;说明&quot; class=&quot;class1 class2&quot; src=&quot;http://7xqb0u.com1.z0.glb.clouddn.com/images/test/demo.png?imageView2/2/w/600&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>其中 ?imageView2/2/w/500 代表生成宽度最多500px的缩略图5。如果经常使用某种图片效果，可以在其七牛创建处理样式，以后直接将 extend 参数设置为 分隔符 + 样式名 就好。例如设置的分隔符为 - ，样式名为 new ，则 extend 参数为 -new 。</p>
<h3 id="引用CSS和JS"><a href="#引用CSS和JS" class="headerlink" title="引用CSS和JS"></a>引用CSS和JS</h3><p>只是引用的标签名不同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;% qnjs jsFile attr1:value1 attr2:value2 &apos;attr3:value31 value32 value3n&apos; %&#125;</div><div class="line">&#123;% qncss cssFile attr1:value1 attr2:value2 &apos;attr3:value31 value32 value3n&apos; %&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注意</strong><br>在添加图片的时候，放在images文件夹下的图片，是可以创建子文件夹的。所以，为了方便以及同时兼容之前使用本地图片插件的方式，每一篇文章或者一个功能对应的图片最好放在一个子文件夹下，这样在日志文章中对图片进行引用的时候就可以直接设置成文件夹名/图片名.png的格式。这里建议文件夹名与文章名相同，便于管理</p>
<h2 id="六、同步到七牛"><a href="#六、同步到七牛" class="headerlink" title="六、同步到七牛"></a>六、同步到七牛</h2><hr>
<p>将文件上传到七牛云有两种方式 <code>hexo s</code> 和 <code>hexo qiniu sync|sync2</code> 的两个命令工具:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">qiniu sync plugin for hexo</div><div class="line">Usage: hexo qiniu  &lt;argument&gt;</div><div class="line">Description:</div><div class="line">hexo qiniu static files sync plugin</div><div class="line">Arguments:</div><div class="line">  info | i    Displays plugin version, aurthor or GitHub links</div><div class="line">  sync | s    Sync your static files to qiniu.</div><div class="line">  sync2 | s2  Sync your static files to qiniu.(And uploaded update files)</div></pre></td></tr></table></figure></p>
<h2 id="七、后记"><a href="#七、后记" class="headerlink" title="七、后记"></a>七、后记</h2><hr>
<p>以下是自己搭建过程中查找的相关链接和信息，希望对大家有帮助。</p>
<ol>
<li><a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="external">https://github.com/gyk001/hexo-qiniu-sync</a></li>
<li><a href="http://www.ixirong.com/2016/10/31/how-to-use-hexo-qiniu-sync-plugin/" target="_blank" rel="external">http://www.ixirong.com/2016/10/31/how-to-use-hexo-qiniu-sync-plugin/</a></li>
<li><a href="http://yuchen-lea.github.io/2016-01-21-use-qiniu-store-file-for-hexo/" target="_blank" rel="external">http://yuchen-lea.github.io/2016-01-21-use-qiniu-store-file-for-hexo/</a></li>
<li><a href="http://error408.com/2016/08/02/Hexo%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/" target="_blank" rel="external">http://error408.com/2016/08/02/Hexo%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建完博客之后一直使用本地图片（相对路径），这样不是很方便，毕竟事关逼格。网上搜索了一把，貌似七牛云做图床评价挺高。说干就干，咱也尝试着使用七牛作为博客的图床了。&lt;/p&gt;
&lt;h2 id=&quot;一、七牛是什么&quot;&gt;&lt;a href=&quot;#一、七牛是什么&quot; class=&quot;headerli
    
    </summary>
    
      <category term="Others" scheme="http://skyhacks.org/categories/Others/"/>
    
    
      <category term="Hexo" scheme="http://skyhacks.org/tags/Hexo/"/>
    
      <category term="Qiniu" scheme="http://skyhacks.org/tags/Qiniu/"/>
    
  </entry>
  
</feed>
